<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software</title>
    <link>http://yazilim.aykutasil.com/index.xml</link>
    <description>Recent content on Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr-tr</language>
    <lastBuildDate>Wed, 18 Jan 2017 12:09:26 +0300</lastBuildDate>
    <atom:link href="http://yazilim.aykutasil.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Yeoman Kullanımı</title>
      <link>http://yazilim.aykutasil.com/2017/01/yeoman-kullan%C4%B1m%C4%B1/</link>
      <pubDate>Wed, 18 Jan 2017 12:09:26 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/yeoman-kullan%C4%B1m%C4%B1/</guid>
      <description>

&lt;h2 id=&#34;yeoman&#34;&gt;Yeoman&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://yeoman.io/&#34;&gt;Yeoman&lt;/a&gt; ile kendi proje yapımızı kurgulayabilir ve opsiyonlar belirleyerek ona göre dosya içeriğimizi vs. düzenleyebiliriz.
Ya da oluşturduğumuz projeye önceden belirlediğimiz bir dosyayı ekleyebilir ve gerekli ayarlamaları otomatik olarak yapmasını sağlayabiliriz. (yeni bir Controller eklemek gibi vs.)&lt;/p&gt;

&lt;p&gt;Ve hazırladığımız bu proje yapısını paket yönetim sistemlerine yollayarak diğer kişilerin kullanımına açabilir veyahut kendimizin de istediğimiz yerden erişebilmesini sağlayabiliriz.&lt;/p&gt;

&lt;p&gt;Öncelikle bilgisayarınız da nodejs yüklü olduğunu varsayıyoruz. Eğer yüklü değilse &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;buradan&lt;/a&gt; gerekli işlemleri yaparak kurabiliriz.&lt;/p&gt;

&lt;p&gt;Daha sonra &lt;code&gt;npm install -g yo&lt;/code&gt; komutunu çalıştırarak &lt;code&gt;yo&lt;/code&gt;komutunun heryerden çalışmasını sağlıyoruz.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yeoman.io/generators/&#34;&gt;Generators&lt;/a&gt;, diğer kişilerin oluşturmuş olduğu yapıları görmek için kullanabiliriz.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Evet kendi proje yapımızı hazırlamaya başlayabiliriz&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Öncelikle yine &lt;strong&gt;Yeoman&lt;/strong&gt; ın kendisini kullanarak yeni yapımızı kurmak için gerekli dosyaların yapılanmasını sağlıyoruz.
Bunun için &lt;code&gt;npm install -g generator-generator&lt;/code&gt; komutunu çalıştırıyoruz.
Ve &lt;code&gt;yo generator&lt;/code&gt;komutu ile gerekli dosya yapısının oluşturulmasını sağlıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yo generator&lt;/code&gt; komutunu çalıştırdığımız da bize &lt;strong&gt;proje ismi (name)&lt;/strong&gt; gibi sorular gelecek ve bizde uygun değerleri girerek dosyaların ona göre düzenlemesini sağlıcaz. Ama &lt;strong&gt;name&lt;/strong&gt; değerini girerken &lt;strong&gt;generators&lt;/strong&gt; ile başladığına emin olmalıyız.&lt;/p&gt;

&lt;p&gt;Ayrıntılı bilgi &lt;a href=&#34;https://github.com/yeoman/generator-generator&#34;&gt;burada&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ve oluşturulan dosya yapısı şu şekilde olmalı;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/VEuO0t8&#34;&gt;&lt;img src=&#34;http://i.imgur.com/VEuO0t8.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;app/templates&lt;/strong&gt; klasörü altındaki tüm dosyalar bizim asıl oluşturmak istediğimiz dosya yapısı. Yani tüm bu işlemler sonrasında &lt;code&gt;yo xyz&lt;/code&gt;çalıştırdığımız da &lt;strong&gt;templates&lt;/strong&gt; klasöründe ki dosyalar oluşturulacaktır.
Tabi ki bizim belirlediğimiz değerler ile bu dosyaların içeriği vs. oluşturulacak. Yoksa bi anlamı kalmaz dimi ;)&lt;/p&gt;

&lt;p&gt;Yukarıda ki resimde &lt;strong&gt;a,b,dummytext .txt&lt;/strong&gt; ve &lt;strong&gt;testFolder&lt;/strong&gt; klasörünü görüyorsunuz.&lt;/p&gt;

&lt;h2 id=&#34;a-txt&#34;&gt;a.txt&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Merhaba A 

Proje ismi : &amp;lt;%= name %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;b-txt&#34;&gt;b.txt&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Dosya B

Değişken değer: &amp;lt;%= degiskenB %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dummy-txt&#34;&gt;dummy.txt&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Dummy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dosya içeriklerinin bu şekilde olduğunu varsayalım.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;app/index.js&lt;/strong&gt; dosyasını açıyoruz ve gerekli düzenlemeleri yapıyoruz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#39;use strict&#39;;
var Generator = require(&#39;yeoman-generator&#39;);
var chalk = require(&#39;chalk&#39;); // yazı renklendirme için kullanılır
var yosay = require(&#39;yosay&#39;); // yeoman çalıştırılırken ilk başta gözüken proje bilgilendirme kısmını hazırlamaka için kullanılır

module.exports = Generator.extend({
  prompting: function () {
    var done = this.async();

    this.log(yosay(
      &#39;Aykut Asil proje oluşturma yapısına Hoş Geldiniz... &#39; +
      chalk.red(&#39;generator-sample-yeoman&#39;) +
      &#39; generator!&#39;
    ));

    var prompts = [{
      type: &#39;confirm&#39;,
      name: &#39;someAnswer&#39;,
      message: &#39;www.aykutasil.com u ziyaret ettin mi ?&#39;,
      default: true
    }, {
      type: &#39;input&#39;,
      name: &#39;name&#39;,
      message: &#39;Proje adı&#39;,
      default: this.appname
    }, {
      type: &#39;input&#39;,
      name: &#39;degiskenB&#39;,
      message: &#39;B name&#39;,
      default: this.appname
    }];

    return this.prompt(prompts).then(function (props) {
      this.props = props;
      this.log(props.someAnswer);
      this.log(props.name);

      done();
    }.bind(this));
  },

  writing: {
    config: function () {
      this.fs.copyTpl( // Eğer hazırlanan dosya içerisinde değişken kullanılmış ise copyTpl ile kopyalama yapılır
        this.templatePath(&#39;a.txt&#39;),
        this.destinationPath(&#39;a.txt&#39;), {
          name: this.props.name
        }
      );

      this.fs.copyTpl(
        this.templatePath(&#39;b.txt&#39;),
        this.destinationPath(&#39;b.txt&#39;), {
          degiskenB: this.props.degiskenB
        }
      );

      this.fs.copy( // Hazırlanacak dosya aynen kopyalama yapılacak ise yani dosya içerisinde değişken ile doldurulacak bir bölüm yok ise
        // copy ile kopyalama yapılır
        this.templatePath(&#39;dummyfile.txt&#39;),
        this.destinationPath(&#39;dummyfile.txt&#39;)
      );

      this.fs.copy(
        this.templatePath(&#39;testFolder/_test.txt&#39;),
        this.destinationPath(&#39;testFolderDeneme/test.txt&#39;)
      );
    }
  },

  install: function () {
    // this.installDependencies(); // tüm dosyala kopyalandıktan sonra npm init çalıştırılması için kullanılır. Eğer çalıştırılmazsa node_modules klasörü oluşturulmamış olur.
  }
});

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda kodların yanında ayrıntılı açıklama var.&lt;/p&gt;

&lt;p&gt;İşlemlerimizi tamamladıktan sonra local imizde test etmek ya da kullanabilmek için &lt;code&gt;npm link&lt;/code&gt; komutunu çalıştırıyoruz.(ana klasör içerisinde iken çalıştırıyoruz)&lt;/p&gt;

&lt;p&gt;Ve herhangi bir yerde yeni bir klasör oluşturalım.
Klasör içerisindeyken &lt;code&gt;yo sample_generator&lt;/code&gt; komutunu çalıştıralım.&lt;/p&gt;

&lt;p&gt;Ve sonuç:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/ome2le3&#34;&gt;&lt;img src=&#34;http://i.imgur.com/ome2le3.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/h5BxC6u&#34;&gt;&lt;img src=&#34;http://i.imgur.com/h5BxC6u.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/f2QglwV&#34;&gt;&lt;img src=&#34;http://i.imgur.com/f2QglwV.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/36yb5ij&#34;&gt;&lt;img src=&#34;http://i.imgur.com/36yb5ij.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CSharp Null Kontrolü</title>
      <link>http://yazilim.aykutasil.com/2017/01/csharp-null-kontrol%C3%BC/</link>
      <pubDate>Mon, 16 Jan 2017 11:13:16 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/csharp-null-kontrol%C3%BC/</guid>
      <description>

&lt;h1 id=&#34;c-ve-operator-kullanımı&#34;&gt;C# ? ve ?? Operator Kullanımı&lt;/h1&gt;

&lt;p&gt;Kısaca bahsedilecek olursa &lt;strong&gt;?&lt;/strong&gt; operatörü &lt;strong&gt;null&lt;/strong&gt; kontrolü yapılmasını sağlar.&lt;/p&gt;

&lt;p&gt;Yazılım geliştirme sırasında en çok rastlanan hatanın sebebi &lt;strong&gt;null&lt;/strong&gt; dönen ifadelerdir. Bu bazen bir değişken bazen parametre vs. olabilir. Ama sebep ifadenin null olmasıdır.&lt;/p&gt;

&lt;p&gt;Önceden şu şekilde kontrol ediyorduk.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var a;
if(a != null)
{
  Console.Write(a);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;şimdi&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;var a;
Console.Write(a ?? &amp;quot;boş değer&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıdaki söz dizimi ile şunu söylüyoruz.
- Eğer &lt;strong&gt;a&lt;/strong&gt; değeri null değil ise ekrana a nın değerini yaz.
- Eğer &lt;strong&gt;a&lt;/strong&gt; değeri null ise &lt;strong&gt;??&lt;/strong&gt; operatörünün sağındaki değeri yani burada &lt;strong&gt;boş değer&lt;/strong&gt; ifedesini yaz.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;int? length = customers?.Length; // null if customers is null   
Customer first = customers?[0];  // null if customers is null  
int? count = customers?[0]?.Orders?.Count();  // null if customers, the first customer, or Orders is null  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıdaki örneği incelersek aslında kod kalitemizin ve okunabilirliğin ne kadar arttığını görebiliriz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;Customers customers = DbHelper.GetCustomers();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıdaki kodu çalıştırdığımızda &lt;code&gt;DbHelper.GetCustomers()&lt;/code&gt; fonksiyonunda &lt;strong&gt;null&lt;/strong&gt; döndüğünü düşünelim.
Biz null kontrolü yapmadan &lt;code&gt;customers.size()&lt;/code&gt;gibi bir fonksiyonu çağıracak olsak uygulamamız patlıcaktır.
Çünkü null bir ifadenin &lt;strong&gt;size&lt;/strong&gt; ı olamaz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;int? size = customers?.size;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yukarıda ki gibi kodumuzu geliştirirsek uygulamamızın patlamasını önlemiş oluruz.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android ile WebView Etkileşimi</title>
      <link>http://yazilim.aykutasil.com/2017/01/android-ile-webview-etkile%C5%9Fimi/</link>
      <pubDate>Wed, 11 Jan 2017 19:59:08 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/android-ile-webview-etkile%C5%9Fimi/</guid>
      <description>

&lt;p&gt;Kısa Hikaye : Üstünde çalışmakta olduğum bir projede kredi kartı ile ödeme yapısı kurmam gerekti. Kısaca projenin yapısından bahsedecek olursak&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Backend : .Net&lt;/li&gt;
&lt;li&gt;Client : Android (Java)&lt;/li&gt;
&lt;li&gt;Ödeme altyapısı : İyzico&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Client tarafında rest isteğiyle tüm işlemlerimizi backend tarafında yapıyoruz. Ödeme yapımızı da bu doğrultuda geliştirdik.&lt;/p&gt;

&lt;p&gt;Problem : 3DS ile ödeme almaya çalıştığımızda malumunuz işin içerisine bankanın bize telefonumuza gelen şifreyi girmemiz için göndermiş olduğu web sayfası vs. giriyor. Bu durumda client ile web sayfası iletişimini de bir şekilde sağlamamız gerekiyor.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Yukarıda ki hikayeyi anlatarak kafanızda bir problemi canlandırmaya çalıştım. Benzer bir çok durum ile karşı karşıya kalabilirsiniz.&lt;/p&gt;

&lt;p&gt;Ulan ben webview de ki butonu vs nasıl android tarafında kontrol edicem ? gibi akılda deli sorular oluşabilir..&lt;/p&gt;

&lt;p&gt;Tabiri caiz ise : PhoneGap tarzı bişiler.. 🙂 😉&lt;/p&gt;

&lt;p&gt;Neyse.&lt;/p&gt;

&lt;p&gt;Örnek ver hacı abi;&lt;/p&gt;

&lt;h2 id=&#34;layout-xml&#34;&gt;Layout.xml&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;
    android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;

    &amp;lt;WebView
        android:id=&amp;quot;@+id/WebView&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;match_parent&amp;quot; /&amp;gt;

&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;activity-fragment&#34;&gt;Activity – Fragment&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;WebView webView = (WebView) findViewById(R.id.WebView);

WebSettings settings = webView.getSettings();
settings.setDefaultTextEncodingName(&amp;quot;utf-8&amp;quot;);
settings.setJavaScriptEnabled(true);

webView.setWebViewClient(new MyWebViewClient());
webView.addJavascriptInterface(new MyWebViewJavascriptInterface(mContext, webView, callbackDialog), &amp;quot;Android&amp;quot;); // Buraya dikkat
webView.loadDataWithBaseURL(null, response.getData().getThreeDSHtmlContent(), &amp;quot;text/html&amp;quot;, &amp;quot;utf-8&amp;quot;, null); // elimizde bulunan bir html dökümanı webview e basıyoruz. URL de verebilirsin istersen
webView.addJavascriptInterface(new MyWebViewJavascriptInterface(mContext, webView, callbackDialog), &amp;quot;Android&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda ki “Android” kısmına istediğimiz ismi verebiliriz. WebView yapısı, burada belirtmiş olduğumuz isim ile sayfaya yüklenen içeriğe bir eklenti yapıyor, yani bir instance alıyor. Biz bu instance ı kullanarak iletişimimizi sağlıyoruz.&lt;/p&gt;

&lt;p&gt;Az sabır. Nasıl olduğunu görüceksin..&lt;/p&gt;

&lt;h2 id=&#34;mywebviewclient&#34;&gt;MyWebViewClient&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class MyWebViewClient extends WebViewClient {

    @Override
    public void onPageFinished(WebView view, String url) {
        super.onPageFinished(view, url);
        //view.loadUrl(&amp;quot;javascript:window.Android.processHTML(&#39;&amp;lt;html&amp;gt;&#39;+document.getElementsByTagName(&#39;html&#39;)[0].innerHTML+&#39;&amp;lt;/html&amp;gt;&#39;);&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bu blok ne yapıyor ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;window.Android.processHTML&lt;/strong&gt; de ki Android bizim yukarıda belirtmiş olduğumuz aracı.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;processHtml&lt;/strong&gt; ise aşağıda tanımlıcak olduğumuz fonksiyon.&lt;/p&gt;

&lt;p&gt;Diğer kısımlar javascript fonksiyonu zaten. Yani sayfada ki ilk html tag ını bularak içindeki html kodu al.&lt;/p&gt;

&lt;p&gt;Aşağıda ki processHtml e bakarsan görüceksin ki htmlContent parametresi bekliyor.Biz de bu parametreye sayfa içeriğinin html kodunu gönderiyoruz. Almış olduğun bu html içeriğiyle ne yaparsın sana kalmış.&lt;/p&gt;

&lt;h2 id=&#34;mywebviewjavascriptinterface&#34;&gt;MyWebViewJavascriptInterface&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class MyWebViewJavascriptInterface {

    Context mContext;
    WebView mWebView;

    MyWebViewJavascriptInterface(Context c, WebView webView) {
        this.mContext = c;
        this.mWebView = webView;
    }

    @JavascriptInterface
    public void processHTML(String htmlContent) {
        // işlem
        // Toast ile html içeriğini gösterebiliriz       
    }

    @JavascriptInterface
    public void islemeDevamEt() {
       // işlem
    }

    @JavascriptInterface
    public void pencereyiKapat() {
        // işlem
        // dialog.dismiss();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WebView miz ile Android native kodumuzun iletişimini bu sınıf sağlıyor.&lt;/p&gt;

&lt;p&gt;Aşşağıda ki  kod ile bunu söylüyoruz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;webView.addJavascriptInterface(new MyWebViewJavascriptInterface(mContext, webView), &amp;ldquo;Android&amp;rdquo;);&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Not&lt;/em&gt;&lt;/strong&gt; : Android 4.2 den sonra &lt;strong&gt;@JavascriptInterface&lt;/strong&gt; annotations ını eklememiz gerekmekte. Yoksa nolur ? Çalışmaz 😉&lt;/p&gt;

&lt;h2 id=&#34;custom-html-content&#34;&gt;Custom Html Content&lt;/h2&gt;

&lt;p&gt;WebView de gösterdiğimiz html contentinde bir buton ekleyelim.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt; &amp;lt;button class=&amp;quot;btn btn-danger&amp;quot; onclick=&amp;quot;PencereyiKapat()&amp;quot;&amp;gt;Pencereyi Kapat&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WebView içinde ki bu butona basıldığını Android anlasın ve (WebView imizi Dialog içerisinde gösterildiğini varsayarak) dialog penceresini kapasın.&lt;/p&gt;

&lt;p&gt;Butonumuzun olduğu sayfaya  javascript kodumuzu ekliyoruz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
  function PencereyiKapat() {
     Android.pencereyiKapat();
  }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda ki Android i hatırladınız dimi ? 🙂&lt;/p&gt;

&lt;p&gt;HTML sayfamız bu kadar.&lt;/p&gt;

&lt;p&gt;WebView içerisinde ki butona basıldığında javascript fonksiyonu çalışacak ve Android.pencereyiKapat() çalışacak. Yani native tarafta tanımlamış olduğumuz pencereyiKapat() fonksiyonu.&lt;/p&gt;

&lt;p&gt;Yukarıda ki yapıyı kullanarak WebView – Android Native etkileşimli yapı kurabilirsin.&lt;/p&gt;

&lt;p&gt;Her zaman ki gibi hayal gücüne ve projeye kalmış 😉&lt;/p&gt;

&lt;p&gt;Kalın sağlıcakla..&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker Komutları</title>
      <link>http://yazilim.aykutasil.com/2017/01/docker-komutlar%C4%B1/</link>
      <pubDate>Wed, 11 Jan 2017 19:56:08 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/docker-komutlar%C4%B1/</guid>
      <description>

&lt;h2 id=&#34;docker-komutları-ve-açıklamaları&#34;&gt;Docker Komutları ve Açıklamaları&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; docker images
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker hostuna yüklü olan image leri gösterir.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; docker ps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Docker hostunda yüklü olan imagelerle inşa edilmiş olan container ları listeler.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; docker run hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;İlk olarak Local de (bilgisayarımızda) hello-world isminde bir image var mı kontrol eder. Eğer varsa direkt olarak çalıştırır.&lt;/p&gt;

&lt;p&gt;Local de verilen isimde bir image bulamaz ise cloud da arama yapar, bulur, local e indirir ve ardından çalıştırır.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; docker pull hello-world
&amp;gt; docker run hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;komutlarının birleşimidir.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; docker run -p 8080:80 nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nginx image local de arar, eğer bulamazsa indirir ve local imize kurar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-p&lt;/strong&gt; parametresi kendisinden sonra verilen parametredeki portlar arasında port forwarding yani port yönlendirme yapar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-p&lt;/strong&gt; = host umuzdaki 8080 portunu container ımızda ki 80 portuna yönlendirme işlemini sağlıyoruz&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; docker exec -it &amp;lt;container_id&amp;gt; /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;komutu ile Container’a bir Bash Shell açabiliriz. -i interaktif terminali -t ise terminalin attach olmasını istediğimizi belirtir. &lt;strong&gt;docker exec -it /bin/bash&lt;/strong&gt; komutunu çalıştırın (Container ID’nin sadece baştan birkaç harfini vermemizin yettiğine -çakışma olmadığı müddetçe- dikkat edin).&lt;/p&gt;

&lt;p&gt;Oluşturmuş olduğumuz container ın içine girerek komutları çalıştırmamıza olanak sağlar.&lt;/p&gt;

&lt;p&gt;Container ın içindeyken;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; ps -ef
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;komutu ile container ın çalıştırmış olduğu tüm process leri listeleyebiliriz.&lt;/p&gt;

&lt;h2 id=&#34;komutlar&#34;&gt;Komutlar&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;docker images&lt;/code&gt; Lokal registery’de mevcut bulunan Image’ları listeler&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker ps&lt;/code&gt; Halihazırda çalışmakta olan Container’ları listeler&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker ps -a&lt;/code&gt;  Docker Daemon üzerindeki bütün Container’ları listeler&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker ps -aq&lt;/code&gt; Docker Daemon üzerindeki bütün Container’ların ID’lerini listeler&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker pull &amp;lt;repository_name&amp;gt;/&amp;lt;image_name&amp;gt;:&amp;lt;image_tag&amp;gt;&lt;/code&gt;    Belirtilen Image’ı lokal registry’ye indirir. Örnek: docker pull gsengun/jmeter3.0:1.7&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker top &amp;lt;container_id&amp;gt;&lt;/code&gt; İlgili Container’da top komutunu çalıştırarak çıktısını gösterir&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker run -it &amp;lt;image_id|image_name&amp;gt;&lt;/code&gt; CMD  Verilen Image’dan terminal’i attach ederek bir Container oluşturur&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker pause &amp;lt;container_id&amp;gt;&lt;/code&gt;   İlgili Container’ı duraklatır&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker unpause &amp;lt;container_id&amp;gt;&lt;/code&gt; İlgili Container pause ile duraklatılmış ise çalışmasına devam ettirilir&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker stop &amp;lt;container_id&amp;gt;&lt;/code&gt;    İlgili Container’ı durdurur&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker start &amp;lt;container_id&amp;gt;&lt;/code&gt;   İlgili Container’ı durdurulmuşsa tekrar başlatır&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker rm &amp;lt;container_id&amp;gt;&lt;/code&gt;  İlgili Container’ı kaldırır fakat ilişkili Volume’lara dokunmaz&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker rm -v &amp;lt;container_id&amp;gt;&lt;/code&gt;   İlgili Container’ı ilişkili Volume’lar ile birlikte kaldırır&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker rm -f &amp;lt;container_id&amp;gt;&lt;/code&gt;   İlgili Container’ı zorlayarak kaldırır. Çalışan bir Container ancak -f ile kaldırılabilir&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker rmi &amp;lt;image_id|image_name&amp;gt;&lt;/code&gt;  İlgili Image’ı siler&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker rmi -f &amp;lt;image_id|image_name&amp;gt;&lt;/code&gt;   İlgili Image’ı zorlayarak kaldırır, başka isimlerle Tag’lenmiş Image’lar -f ile kaldırılabilir&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker info&lt;/code&gt;   Docker Daemon’la ilgili özet bilgiler verir&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker inspect &amp;lt;container_id&amp;gt;&lt;/code&gt; İlgili Container’la ilgili detaylı bilgiler verir&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker inspect &amp;lt;image_id|image_name&amp;gt;&lt;/code&gt;  İlgili Image’la ilgili detaylı bilgiler verir&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker rm $(docker ps -aq)&lt;/code&gt;    Bütün Container’ları kaldırır&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker stop $(docker ps -aq)&lt;/code&gt;  Çalışan bütün Container’ları kaldırır&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker rmi $(docker images -aq)&lt;/code&gt;   Bütün Image’ları kaldırır&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker images -q -f dangling=true&lt;/code&gt; Dangling (taglenmemiş ve bir Container ile ilişkilendirilmemiş) Image’ları listeler&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker rmi $(docker images -q -f dangling=true)&lt;/code&gt;   Dangling Image’ları kaldırır&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker volume ls -f dangling=true&lt;/code&gt; Dangling Volume’ları listeler&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker volume rm $(docker volume ls -f dangling=true -q)&lt;/code&gt;  Danling Volume’ları kaldırır&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker logs &amp;lt;container_id&amp;gt;&lt;/code&gt;    İlgili Container’ın terminalinde o ana kadar oluşan çıktıyı gösterir&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker logs -f &amp;lt;container_id&amp;gt;&lt;/code&gt; İlgili Container’ın terminalinde o ana kadar oluşan çıktıyı gösterir ve -f follow parametresi ile o andan sonra oluşan logları da göstermeye devam eder&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker exec &amp;lt;container_id&amp;gt; &amp;lt;command&amp;gt;&lt;/code&gt;  Çalışan bir Container içinde bir komut koşturmak için kullanılır&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker exec -it &amp;lt;container_id&amp;gt; /bin/bash&lt;/code&gt;  Çalışan bir Container içinde terminal açmak için kullanılır. İlgili Image’da /bin/bash bulunduğu varsayımı ile&lt;/p&gt;

&lt;p&gt;&lt;code&gt;docker attach &amp;lt;container_id&amp;gt;&lt;/code&gt;  Önceden detached modda -d başlatılan bir Container’a attach olmak için kullanılır&lt;/p&gt;

&lt;p&gt;Ek Kaynak : &lt;a href=&#34;http://www.gokhansengun.com/docker-nedir-nasil-calisir-nerede-kullanilir/&#34;&gt;http://www.gokhansengun.com/docker-nedir-nasil-calisir-nerede-kullanilir/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>http://yazilim.aykutasil.com/2017/01/docker/</link>
      <pubDate>Wed, 11 Jan 2017 19:55:08 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/docker/</guid>
      <description>

&lt;h2 id=&#34;docker&#34;&gt;DOCKER&lt;/h2&gt;

&lt;p&gt;Docker aldı başını gidiyor. Yeni bir devrim açıyor.&lt;/p&gt;

&lt;p&gt;E haliyle yazılım dünyası buna sessiz kalmamakla beraber bir çok Docker nedir? örnekleri vs. hazırlanıyor.&lt;/p&gt;

&lt;p&gt;Bu nedenle biz Docker nedir?  tanımlamasından daha çok hızlı ilerlemeler şeklinde ufak uygulamalar geliştiricez. Bende bu yazı serisiyle paralel şekilde öğrenimimi sağlayacağımı belirtmek isterim ! 🙂&lt;/p&gt;

&lt;p&gt;Başlıyoruz..&lt;/p&gt;

&lt;p&gt;İlk olarak makinemize Docker ı kuralım.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Mac: &lt;a href=&#34;https://docs.docker.com/docker-for-mac/&#34;&gt;https://docs.docker.com/docker-for-mac/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Windows : &lt;a href=&#34;https://docs.docker.com/docker-for-windows/&#34;&gt;https://docs.docker.com/docker-for-windows/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;İndirip kurulumu sağladıktan sonra terminali açarak&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;gt; docker run hello-world&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;komutunu çalıştırıyoruz ve Docker a merhaba diyoruz.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Cannot connect to the Docker daemon. Is the docker daemon running on this host?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda ki mesajı alanlar için;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-machine start # start virtual machine for docker
$ docker-machine env  # it&#39;s helps to get environment variables
$ eval &amp;quot;$(docker-machine env default)&amp;quot; #set environment variables
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Komutlarını çalıştırarak Docker ın sistemimize tanıtıyoruz ve sonrasında tekrar &lt;strong&gt;docker run Hello-World&lt;/strong&gt; komutunu çalıştırıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/HP4lgFS&#34;&gt;&lt;img src=&#34;http://i.imgur.com/HP4lgFS.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hadi bakalım hayırlı olsun.. 😉&lt;/p&gt;

&lt;p&gt;Ek Kaynak için : &lt;a href=&#34;http://www.enterprisecoding.com/post/yeni-baslayanlar-icin-docker&#34;&gt;http://www.enterprisecoding.com/post/yeni-baslayanlar-icin-docker&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ExecutorService submit() – execute()</title>
      <link>http://yazilim.aykutasil.com/2017/01/executorservice-submit--execute/</link>
      <pubDate>Wed, 11 Jan 2017 19:26:49 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/executorservice-submit--execute/</guid>
      <description>

&lt;h1 id=&#34;executorservice-submit-execute&#34;&gt;ExecutorService submit() – execute()&lt;/h1&gt;

&lt;p&gt;Link : &lt;a href=&#34;http://javarevisited.blogspot.com.tr/2016/04/difference-between-ExecutorServie-submit-vs-Executor-execute-method-in-Java.html&#34;&gt;http://javarevisited.blogspot.com.tr/2016/04/difference-between-ExecutorServie-submit-vs-Executor-execute-method-in-Java.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Executor newCachedThreadPool() newFixedThreadPool(n) newSingleThreadExecutor()</title>
      <link>http://yazilim.aykutasil.com/2017/01/executor-newcachedthreadpool-newfixedthreadpooln-newsinglethreadexecutor/</link>
      <pubDate>Wed, 11 Jan 2017 18:55:08 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/executor-newcachedthreadpool-newfixedthreadpooln-newsinglethreadexecutor/</guid>
      <description>

&lt;h1 id=&#34;executor-newcachedthreadpool-newfixedthreadpool-n-newsinglethreadexecutor&#34;&gt;Executor newCachedThreadPool() newFixedThreadPool(n) newSingleThreadExecutor()&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Thread&lt;/strong&gt; kullanımı, Java ile multi-threading yazılım geliştiriyorsanız mutlaka ama mutlaka bilmeniz gereken konulardan biridir.&lt;/p&gt;

&lt;h2 id=&#34;threadpool&#34;&gt;ThreadPool&lt;/h2&gt;

&lt;p&gt;Gün geldi çattı ve uygulamanız ilk kurulduğu amacın evrimleşmesi sonucu bambaşka bir hale büründü 🙂&lt;/p&gt;

&lt;p&gt;Yani birçok uygulamada gidişat bu yöndedir ve olması gerekende budur.&lt;/p&gt;

&lt;p&gt;Aynı anda 1000 den fazla kullanıcıya cevap verme gereksinimiz var artık. Sadece patron kullanmıyor sonuçta. Ya da patron öyle bir uygulama istemişki ağır işler gerektiriyor. Uzun süreler gerektiren işlemler sonucunda akış tamamlanıyor vs.&lt;/p&gt;

&lt;p&gt;Sözün kısası;&lt;/p&gt;

&lt;p&gt;Uygulamamız içerisinde ki akışları ayrı parçalara bölerek daha hızlı çalışmasını ve aynı anda birden fazla iş yapmamızı sağlayan yapıdır bu Thread ler.&lt;/p&gt;

&lt;p&gt;Peki en basitinden nasıl kullanırız bu yapıyı ? Tabi hödük gibi değil, olması gerektiği gibi.. 😉&lt;/p&gt;

&lt;h2 id=&#34;executors&#34;&gt;Executors&lt;/h2&gt;

&lt;p&gt;Executors sınıfı içerisinde statik olarak tanımlanmış ve kolayca thread pool oluşturabileceğimiz yapılar mevcuttur.&lt;/p&gt;

&lt;h3 id=&#34;executors-newcachedthreadpool&#34;&gt;EXECUTORS.NEWCACHEDTHREADPOOL()&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;
Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available. These pools will typically improve the performance of programs that execute many short-lived asynchronous tasks. Calls to execute will reuse previously constructed threads if available. If no existing thread is available, a new thread will be created and added to the pool. Threads that have not been used for sixty seconds are terminated and removed from the cache. Thus, a pool that remains idle for long enough will not consume any resources. Note that pools with similar properties but different details (for example, timeout parameters) may be created using ThreadPoolExecutor constructors.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Resmi kaynaklardan yukarıdaki tanımlama yapılmış.&lt;/p&gt;

&lt;p&gt;Yani özetlicek olursak;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Kısa süren işlemlerimizde bu yapıyı kullanmalıyız&lt;/li&gt;
&lt;li&gt;Bu yapı bizim için otomatik olarak bir thread oluşturur ve ihtiyacı oldukça yeni bir thread oluşturulmasını sağlar&lt;/li&gt;
&lt;li&gt;Oluşturulan thread ler boş kaldığında thread i kapatır. (60 saniye)&lt;/li&gt;
&lt;li&gt;Oluşturulan thread le işi bitti ve kapatılması için belli bir süre gerekiyor (60 saniye). Ama bu süre tamamlanmadan yeni bir iş geldi. Bu işi yapmak için yeni bir thread açmaz. Eğer önceden oluşturulan thread ler arasında uygun durumda olan varsa yeni gelen işi orada çalıştırır.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Peki süper. Herşey çok iyi. Olması gerektiği gibi. Peki aynı anda 10000 kişi işlem yapmaya çalıştı. Ve ağır işlemler olduğu için sürekli yeni thread oluşturmak zorunda kaldı. 10000 tane yeni thread. Thread oluşturmak da belli bir süre ve emek gerektiriyor unutma. Peki CPU ? … vs. vs.
İşte bu yüzden kısa süreli ve hafif işler için bu yapıyı kullanıyoruz. 😉&lt;/p&gt;

&lt;p&gt;Aga bana örnek söyle.&lt;/p&gt;

&lt;p&gt;Tamam sakin ol..  :*&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void executorServiceNewCachedThreadPool() {
    
    ExecutorService executorService = Executors.newCachedThreadPool();

    for (int a = 0; a &amp;lt; 40; a++) {
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Log.i(TAG, &amp;quot;ExecuterService: &amp;quot; + Thread.currentThread().getName());
            }
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Çıktı:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I/MainActivity: ExecuterServicee: pool-7-thread-43
I/MainActivity: ExecuterServicee: pool-7-thread-10
I/MainActivity: ExecuterServicee: pool-7-thread-111
I/MainActivity: ExecuterServicee: pool-7-thread-47
I/MainActivity: ExecuterServicee: pool-7-thread-91
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda ki çıktıdan görüldüğü üzere 111 thread oluşturmuş. Ben 10000 satırın sadece bi kısmını yapıştırdım buraya. Belki 200 tane fln de oluşturmuş olabilir. Yani makineye ve işe bağlı olarak değişiyor. Kodun çalışmasıda ~6-7 saniye kadar sürdü. Yani baya uzun. Eee bu kadar thread açmak kapamak kolay değil.&lt;/p&gt;

&lt;p&gt;Ama 60 saniye sonra tüm thread ler kapatılacak. Bu yönden de bakabilirsin.&lt;/p&gt;

&lt;p&gt;Hangi yönden bakman gerektiğini projen söylücek sana. Kulak ver..&lt;/p&gt;

&lt;p&gt;Neyse..&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static ExecutorService newCachedThreadPool() {
 return new ThreadPoolExecutor(0, Integer.MAX_VALUE,
 60L, TimeUnit.SECONDS,
 new SynchronousQueue&amp;lt;Runnable&amp;gt;());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yukarıda ki fonksiyonu kullanarak kendimize uygun cachedThreadPool oluşturabiliriz.&lt;/p&gt;

&lt;p&gt;Tabi şuraya bakmakta fayda var : &lt;a href=&#34;http://stackoverflow.com/a/1800583/3448461&#34;&gt;http://stackoverflow.com/a/1800583/3448461&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;executors-newfixedthreadpool-n&#34;&gt;EXECUTORS.NEWFIXEDTHREADPOOL(N)&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;
Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue. At any point, at most nThreads threads will be active processing tasks. If additional tasks are submitted when all threads are active, they will wait in the queue until a thread is available. If any thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks. The threads in the pool will exist until it is explicitly shutdown.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Yani diyor ki;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Uygulaman da daha fazla kontrol sahibi olmak istiyorsan bu yapıyı kullan.&lt;/li&gt;
&lt;li&gt;Thread e göndereceğin işler daha ağır ve uzun işler ise bu yapıyı kullan&lt;/li&gt;
&lt;li&gt;Ben senin tanımlamış olduğun kadar Thread oluşturucam. Ve bana iş yolladıkça hangi thread müsaitse onda çalıştırıcam. Tüm Thread ler dolu iken iş gelirse sıraya sokacam. Sen raad ol. Ben halledicem hepsini diyor.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void executorServiceNewFixedThreadPool() {

    ExecutorService executorService = Executors.newFixedThreadPool(5);

    for (int a = 0; a &amp;lt; 10000; a++) {
        executorService.execute(new Runnable() {
            @Override
            public void run() {
                Log.i(TAG, &amp;quot;ExecuterServicee: &amp;quot; + Thread.currentThread().getName());
            }
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Çıktı:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I/MainActivity: ExecuterServicee: pool-7-thread-5
I/MainActivity: ExecuterServicee: pool-7-thread-5
I/MainActivity: ExecuterServicee: pool-7-thread-1
I/MainActivity: ExecuterServicee: pool-7-thread-3
I/MainActivity: ExecuterServicee: pool-7-thread-3
I/MainActivity: ExecuterServicee: pool-7-thread-3
I/MainActivity: ExecuterServicee: pool-7-thread-3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ortalama ~2 saniye sürdü.&lt;/p&gt;

&lt;h3 id=&#34;executors-newsinglethreadexecutor&#34;&gt;EXECUTORS.NEWSINGLETHREADEXECUTOR()&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void executorServiceNewSingleThreadExecutor() {
    ExecutorService executorService = Executors.newSingleThreadExecutor();

    for (int a = 0; a &amp;lt; 10000; a++) {
        executorService.execute(new Runnable() {
            @Override
            public void run() {
                Log.i(TAG, &amp;quot;ExecuterServicee: &amp;quot; + Thread.currentThread().getName());
            }
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Çıktı:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I/MainActivity: ExecuterServicee: pool-7-thread-1
I/MainActivity: ExecuterServicee: pool-7-thread-1
I/MainActivity: ExecuterServicee: pool-7-thread-1
I/MainActivity: ExecuterServicee: pool-7-thread-1
I/MainActivity: ExecuterServicee: pool-7-thread-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ortalama ~2 saniye sürdü.&lt;/p&gt;

&lt;p&gt;Tek bir Thread oluşturarak tüm gelen işleri sıraya sokarak bu Thread üzerinde işlemi gerçekleştirir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Peki bir soru ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Executors.newSingleThreadExecutor() ile Executors.newFixedThreadPool(1) arasında fark var mı ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ufakta olsa var tabi.&lt;/p&gt;

&lt;p&gt;Ama ikiside tek bir Thread oluşturur ve gelen tüm işleri bu Thread üzerinden gerçekleştirir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fark :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Similirity
newSingleThreadExecutor() returns ExecutorService with single thread worker and newFixedThreadPool(1) also returns ExecutorService with single thread worker. In both cases if thread terminates, new thread will be created.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Difference
ExecutorService returned by newSingleThreadExecutor(), can never increase its thread pool size more than one. ExecutorService returned by newFixedThreadPool(1), can increase its thread pool size more than one at run time by setCorePoolSize() of the class ThreadPoolExecutor.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Yani &lt;strong&gt;newFixedThreadPool(1)&lt;/strong&gt; ile oluşturulan tek Thread yapısı sonradan artırılabilir. Ama &lt;strong&gt;newSingleThreadExecutor()&lt;/strong&gt; ile oluşturulan yapı her zaman tek Thread üzerinden çalıştırılır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nasıl arttırabiliriz ?&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void changeThreadSize() {

    ExecutorService executorService = Executors.newFixedThreadPool(1);
    ThreadPoolExecutor threadPoolExecutor = (ThreadPoolExecutor) executorService;
    threadPoolExecutor.setCorePoolSize(2);
    threadPoolExecutor.setMaximumPoolSize(2);

    for (int a = 0; a &amp;lt; 10000; a++) {
        threadPoolExecutor.execute(new Runnable() {
            @Override
            public void run() {
                Log.i(TAG, &amp;quot;ExecuterServicee: &amp;quot; + Thread.currentThread().getName());
            }
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Çıktı:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I/MainActivity: ExecuterServicee: pool-7-thread-1
I/MainActivity: ExecuterServicee: pool-7-thread-1
I/MainActivity: ExecuterServicee: pool-7-thread-2
I/MainActivity: ExecuterServicee: pool-7-thread-2
I/MainActivity: ExecuterServicee: pool-7-thread-2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Runnable() &amp; Callable()</title>
      <link>http://yazilim.aykutasil.com/2017/01/runnable--callable/</link>
      <pubDate>Wed, 11 Jan 2017 18:55:08 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/runnable--callable/</guid>
      <description>

&lt;h1 id=&#34;runnable-callable&#34;&gt;Runnable() &amp;amp; Callable()&lt;/h1&gt;

&lt;p&gt;Ayrıntılı açıklama için &lt;a href=&#34;http://www.java67.com/2013/01/difference-between-callable-and-runnable-java.html&#34;&gt;bu siteyi&lt;/a&gt; kullanabilirsiniz.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RxJava range() Kullanımı</title>
      <link>http://yazilim.aykutasil.com/2017/01/rxjava-range-kullan%C4%B1m%C4%B1/</link>
      <pubDate>Wed, 11 Jan 2017 18:52:51 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/rxjava-range-kullan%C4%B1m%C4%B1/</guid>
      <description>

&lt;h1 id=&#34;rxjava-range-kullanımı&#34;&gt;RxJava range() Kullanımı&lt;/h1&gt;

&lt;p&gt;**Örnek kod:&amp;ndash;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void range() {
    Observable.range(3, 5).subscribeOn(Schedulers.io())
            .subscribe(success -&amp;gt; {
                Log.i(TAG, &amp;quot;val: &amp;quot; + success.toString());
            });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Açıklama:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;İlk değer 3 kabul edilerek sonraki 5 sayı için teker teker onNext() çağırılır. Yani 3 , 4, 5, 6, 7&lt;/p&gt;

&lt;p&gt;Yukarıda ki kodun çıktısı aşağıdaki gibidir.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I/MainActivity: val: 3
I/MainActivity: val: 4
I/MainActivity: val: 5
I/MainActivity: val: 6
I/MainActivity: val: 7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RxJava candır 😉&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RxJava scan() Kullanımı</title>
      <link>http://yazilim.aykutasil.com/2017/01/rxjava-scan-kullan%C4%B1m%C4%B1/</link>
      <pubDate>Wed, 11 Jan 2017 18:49:21 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/rxjava-scan-kullan%C4%B1m%C4%B1/</guid>
      <description>

&lt;h1 id=&#34;rxjava-scan-kullanımı&#34;&gt;RxJava scan() Kullanımı&lt;/h1&gt;

&lt;p&gt;RxJava da scan() kullanımı iki şekilde olur.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. İlk değer ataması yapılarak&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void scan() {
    Observable.just(3, 5, 7, 9)
            .scan(10,(val1, val2) -&amp;gt; {
                //
                Log.i(TAG, &amp;quot;val1: &amp;quot; + val1.toString());
                Log.i(TAG, &amp;quot;val2: &amp;quot; + val2.toString());
                return val1 + val2;
            }).subscribeOn(Schedulers.io())
            .subscribe(success -&amp;gt; {
                Log.i(TAG, &amp;quot;Sonuc:&amp;quot; + success.toString());
            });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;2. İlk değer ataması yapılmadan&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void scan() {
    Observable.just(3, 5, 7, 9)
            .scan((val1, val2) -&amp;gt; {
                //
                Log.i(TAG, &amp;quot;val1: &amp;quot; + val1.toString());
                Log.i(TAG, &amp;quot;val2: &amp;quot; + val2.toString());
                return val1 + val2;
            }).subscribeOn(Schedulers.io())
            .subscribe(success -&amp;gt; {
                Log.i(TAG, &amp;quot;Sonuc:&amp;quot; + success.toString());
            });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Açıklama:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Observable nesnesinin içindeki her bir item a fonksiyon uygulamamızı sağlar. Ve her iterasyon sonrası sonucu yayınlar yani subscribe.OnSuccess metoduna yollar. Başka bir deyişle scan() kod bloğu içeresinde tanımlamış olduğumuz fonksiyonu item lara sırayla uygulayarak onNext() fonksiyonunu çağırır.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void scan() {
    Observable.just(3, 5, 7, 9)
            .scan(10,(val1, val2) -&amp;gt; {
                //
                Log.i(TAG, &amp;quot;val1: &amp;quot; + val1.toString());
                Log.i(TAG, &amp;quot;val2: &amp;quot; + val2.toString());
                return val1 + val2;
            }).subscribeOn(Schedulers.io())
            .subscribe(success -&amp;gt; {
                Log.i(TAG, &amp;quot;Sonuc:&amp;quot; + success.toString());
            });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda ki örnek üzerinden gidecek olursak;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I/MainActivity: Sonuc:10
I/MainActivity: val1: 10
I/MainActivity: val2: 3
I/MainActivity: Sonuc:13
I/MainActivity: val1: 13
I/MainActivity: val2: 5
I/MainActivity: Sonuc:18
I/MainActivity: val1: 18
I/MainActivity: val2: 7
I/MainActivity: Sonuc:25
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;böyle bir çıktı ile karşılaşırız.&lt;/p&gt;

&lt;p&gt;İlk değer ataması yaptığımız için (10) ilk olarak onSuccess in içine bu değer düşer. Daha sonra Observable nesnemizin ilk item ı olan 3 değeri ile toplama işlemi yapılır (10 + 3) ve sonuç onSuccess e  yollanır (13). Daha sonra 13 ile ikinci item olan 5 toplanır (13 + 5) ve sonuç (18) onSuccess e aktarılır. Tüm item lar işlem görünceye kadar devam eder.&lt;/p&gt;

&lt;p&gt;RxJava candır 😉&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RxJava reduce() Kullanımı</title>
      <link>http://yazilim.aykutasil.com/2017/01/rxjava-reduce-kullan%C4%B1m%C4%B1/</link>
      <pubDate>Wed, 11 Jan 2017 18:42:04 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/rxjava-reduce-kullan%C4%B1m%C4%B1/</guid>
      <description>

&lt;h1 id=&#34;rxjava-reduce-kullanımı&#34;&gt;RxJava reduce() Kullanımı&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;reduce()&lt;/strong&gt; fonskyionu iki şekilde çalışır;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;.reduce(new BiFunction&amp;lt;Integer, Integer, Integer&amp;gt;() {
    @Override
    public Integer apply(Integer val1, Integer val2) throws Exception {
        return null;
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;.reduce(10,new BiFunction&amp;lt;Integer, Integer, Integer&amp;gt;() {
    @Override
    public Integer apply(Integer val1, Integer val2) throws Exception {
        return null;
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1 ile 2 nin farkı, 2 de görüldüğü üzere fonksiyona başlangıç değeri atanabilmesidir.&lt;/p&gt;

&lt;p&gt;Aşağıdaki örneklerde daha net görebilirsiniz.&lt;/p&gt;

&lt;p&gt;RxJava’nın reduce fonksiyonunu tanımlıcak olursak;&lt;/p&gt;

&lt;p&gt;Observable nesnesine ait her bir item a (1 , 3, 5) fonksiyon uygulanmasını sağlar. Bunu map() gibi fonksiyonlarda sağlıyor. Ama tabi reduce bunu farklı bir şekilde yapıyor.&lt;/p&gt;

&lt;p&gt;Eğer ilk değer (seed) atanmamış ise ilk değer olarak (val1) ilk item ı (1) alıyor.&lt;/p&gt;

&lt;p&gt;Daha sonra biz her item a yapması gereken işlem olarak iki değeri toplamasını söylediğimiz için, ilk değer ve ikinci değeri toplayıp bunu bir sonraki işlem için ilk değer olarak atıyor. İkinci iterasyonda kaldığı yerden devam ederek, ilk değer olarak bir önceki işlemin sonucu ve ikinci değer olarak 2. item ı alıyor. Yine toplama işlemi yaparak bir sonraki işlem için ilk değer ataması yapıyor.&lt;/p&gt;

&lt;p&gt;Tüm item lar ile işlem yapıncaya kadar devam ediyor ve sonuç subscribe.onSuccess in içine düşüyor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void reduce() {
    Observable.just(1, 3, 5)
            .reduce((val1, val2) -&amp;gt; {
                Log.i(TAG, &amp;quot;val1: &amp;quot; + val1.toString());
                Log.i(TAG, &amp;quot;val2: &amp;quot; + val2.toString());
                return val1 + val2;
            }).retry()
            .subscribeOn(Schedulers.computation())
            .subscribe(success -&amp;gt; {
                Log.i(TAG, &amp;quot;Sonuc:&amp;quot; + success.toString());
            });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Çıktı:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I/MainActivity: val1: 1
I/MainActivity: val2: 3
I/MainActivity: val1: 4
I/MainActivity: val2: 5
I/MainActivity: Sonuc:9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Burda yukarıda ki işlemden farklı olarak ek bir iterasyon daha yapılıyor. Çünkü ilk değer atamasını biz kendimiz yapıyoruz. İkinci değer olarak da her item sırayla bu görevi üstleniyor. Ve toplama işlemi yapılıp, toplam sonucunu ilk değer olarak atadıktan sonra döngü devam ediyor. Ve sonuç subscribe.onSuccess e düşüyor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void reduce() {
    Observable.just(1, 3, 5).reduce(10, (val1, val2) -&amp;gt; {
        Log.i(TAG, &amp;quot;val1: &amp;quot; + val1.toString());
        Log.i(TAG, &amp;quot;val2: &amp;quot; + val2.toString());
        return val1 + val2;
    }).retry()
            .subscribeOn(Schedulers.computation())
            .subscribe(success -&amp;gt; {
                Log.i(TAG, &amp;quot;Sonuc:&amp;quot; + success.toString());
            });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Çıktı:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I/MainActivity: val1: 10
I/MainActivity: val2: 1
I/MainActivity: val1: 11
I/MainActivity: val2: 3
I/MainActivity: val1: 14
I/MainActivity: val2: 5
I/MainActivity: Sonuc:19
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RxJava candır 😉&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VS Code &amp; Express &amp; TypeScript &amp; IntelliSense</title>
      <link>http://yazilim.aykutasil.com/2017/01/vs-code--express--typescript--intellisense/</link>
      <pubDate>Wed, 11 Jan 2017 18:14:05 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/vs-code--express--typescript--intellisense/</guid>
      <description>

&lt;h1 id=&#34;vs-code-express-typescript-intellisense&#34;&gt;VS Code &amp;amp; Express &amp;amp; TypeScript &amp;amp; IntelliSense&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VS Code&lt;/a&gt;,  &lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt; ile aynı çekirdeği paylaşan, &lt;a href=&#34;http://electron.atom.io/&#34;&gt;Electron&lt;/a&gt; kullanılarak microsoft tarafından özelleştirilmiş ve birçok dil ile uygulama geliştirmeniz için çeşitli eklentileri bulunan bir editördür.&lt;/p&gt;

&lt;p&gt;Günümüzün lider dili malum Javascript ve belki de bunun böyle olmasının en temel sebeplerinden biri &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;NodeJS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;NodeJS&lt;/a&gt; ile çok hızlı bir şekilde ve tamamen javascript  kullanarak web siteleri, uygulamaları, api service leri vb. geliştirebiliriz.&lt;/p&gt;

&lt;p&gt;Bu yazımızda &lt;strong&gt;VS Code&lt;/strong&gt; un nimetlerinden yararlanarak hızlı ve kolay bir şekilde nasıl NodeJS uygulaması yazabiliriz, bunu görücez.&lt;/p&gt;

&lt;p&gt;Ve bu uygulamamızı geliştirirlem NodeJS in en temel kütüphanelerinden biri olan Express i kullanıcaz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CLI&lt;/strong&gt; kullanarak express uygulaması oluşturabilmemiz için express-generator module ünün global olarak kaydediyoruz.&lt;/p&gt;

&lt;p&gt;Ayrıntılı bilgi &lt;a href=&#34;http://expressjs.com/en/starter/generator.html&#34;&gt;burada&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install express-generator -g&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Daha sonra projemizi oluşturacağımız path e giderek;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;express SampleNodeApp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;yazarak uygulamamızın temel yapısını kolayca oluşturuyoruz. Daha sonra istediğimiz şekilde özelleştirme yapabiliriz tabiki.&lt;/p&gt;

&lt;p&gt;Daha sonra oluşturduğumuz projeyi VS Code ile açıyoruz.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VS Code un nimetlerinden faydalanabilmek için &lt;strong&gt;jsconfig.js&lt;/strong&gt; dosyasını eklememiz gerekmekte. VS Code penceresinin sağ alt tarafında bulunan ampül e tıklarsanız kısa yoldan bu dosyayı oluşturabilirsiniz.&lt;/li&gt;
&lt;li&gt;Daha sonra VS Code un &lt;strong&gt;Debug&lt;/strong&gt; sekmesine girerek sol üstte bulunan ayarlar simgesine tıklıyoruz ve Node seçeneğini seçerek launch.js dosyasını oluşturulmasını sağlıyoruz.&lt;/li&gt;
&lt;li&gt;Terminali açarak ilk olarak aşağıdaki satırı çalıştırarak typings modülünü yüklüyoruz.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;npm install -g typings&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Daha sonra birçok dil için bulunan ve kod yazarken prompt çıkartarak bize öneride bulunan DefinitelyTyped ları ekliyoruz.Biz NodeJs uygulaması geliştirdiğimiz için node için olanı ve express module ünü kullanarak geliştirme yaptığımız içinde express için olanı yüklüyoruz. DefinetlyTyped ı buradan görebilirsiniz.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;typings install dt~node --global&lt;/code&gt;
&lt;code&gt;typings install dt~express dt~serve-static dt~express-serve-static-core --global&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ve artık hızlı bir şekilde NodeJS uygulaması geliştirmeye hazırız.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Uygulamızın ilk hali aşağıdaki gibidir. Yani express SampleNodeApp yazdığımızda aşağıdaki dosyaları otomatik olarak oluşur.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/AvhZ2zo&#34;&gt;&lt;img src=&#34;http://i.imgur.com/AvhZ2zo.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;__dirname&lt;/strong&gt; in üstüne geldiğimizde any yazısını görürüz. Yani herhangi bir öneri gözükmemektedir.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/aIa7lo5&#34;&gt;&lt;img src=&#34;http://i.imgur.com/aIa7lo5.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sol tarafta en altta bulunan simgeye tıklayarak açtığımız Debug sayfasında &lt;strong&gt;Environment (Node.js)&lt;/strong&gt; i seçiyoruz ve default yapılandırmanın oluşmasını sağlıyoruz.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/XDb5nZS&#34;&gt;&lt;img src=&#34;http://i.imgur.com/XDb5nZS.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sağ altta bulunan ampül simgesine tıklayarak (yukarıda ki resimlerden görebilirsiniz) jsconfig.js dosyasını oluşturuyoruz.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/SObhMhv&#34;&gt;&lt;img src=&#34;http://i.imgur.com/SObhMhv.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/eYvQGgC&#34;&gt;&lt;img src=&#34;http://i.imgur.com/eYvQGgC.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;VS Code tarafında yapmamız gerekenler bunlar. Şimdi IntelliSense için gerekli modülleri yüklememiz gerekiyor.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/YHze3y4&#34;&gt;&lt;img src=&#34;http://i.imgur.com/YHze3y4.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/a1gOXCW&#34;&gt;&lt;img src=&#34;http://i.imgur.com/a1gOXCW.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/ACedntg&#34;&gt;&lt;img src=&#34;http://i.imgur.com/ACedntg.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/kC5no16&#34;&gt;&lt;img src=&#34;http://i.imgur.com/kC5no16.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/KEw70NZ&#34;&gt;&lt;img src=&#34;http://i.imgur.com/KEw70NZ.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Gerekli modülleri yükledik. Biz NodeJS uygulaması geliştirdiğimiz için node ve express için olan modülleri kurdur. Diğer dillerden geliştirme yaparken o dile ait eklentileri kurmalısınız.&lt;/p&gt;

&lt;p&gt;Ve sonuç olarak artık yazılan kodun üstüne gelerek açıklamayı ve nasıl kullanılması gerektiğine dair ipuçlarını görebiliriz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/00w0gP9&#34;&gt;&lt;img src=&#34;http://i.imgur.com/00w0gP9.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TCP/IP Nasıl Çalışır ?</title>
      <link>http://yazilim.aykutasil.com/2017/01/tcp/ip-nas%C4%B1l-%C3%A7al%C4%B1%C5%9F%C4%B1r-/</link>
      <pubDate>Wed, 11 Jan 2017 18:05:02 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/tcp/ip-nas%C4%B1l-%C3%A7al%C4%B1%C5%9F%C4%B1r-/</guid>
      <description>

&lt;h1 id=&#34;tcp-ip-nasıl-çalışır&#34;&gt;TCP/IP Nasıl Çalışır ?&lt;/h1&gt;

&lt;p&gt;Bilgisayar ağları kullanılarak bilgisayarların birbirileriyle haberleşmeye başladıkları ilk yıllarda iki bilgisayarın birbiriyle haberleşebilmeleri için aynı marka/model cihazları kullanmaları gerekiyordu. Bunun üzerine farklı üreticiler tarafından üretilen cihazların birbiriyle sorunsuz ve belirli bir düzen içinde haberleşebilmesi için çeşitli standartlar geliştirilmiştir.&lt;/p&gt;

&lt;p&gt;Bunlardan en çok kullanılanı Açık Sistem Bağlantıları komitesi tarafından geliştirilen 7 katmanlı OSI referans modeli ve Amerikan Savunma Bakanlığı tarafından geliştirilen TCP/IP referans modelidir. OSI iki bilgisayar arasındaki haberleşme problemini çözmek için 7 katmanlı (aşamalı) bir ağ sistemi önermiştir.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/TVlx38I&#34;&gt;&lt;img src=&#34;http://i.imgur.com/TVlx38I.gif&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OSI referans modelindeki 7 katmana karşılık TCP/IP referans modeli 4 katmanlı bir çözüm sunar ve 7 katmanlı OSI modeline göre daha hızlı bir iletişim imkânı sunar. OSI modeli iletişim standartlarını belirlemeye yöneliktir ve TCP/IP daha uygulanabilir bir model olduğu için daha çok uygulamaya yöneliktir.&lt;/p&gt;

&lt;h2 id=&#34;tcp-ip-nedir&#34;&gt;TCP/IP Nedir?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;TCP/IP&lt;/strong&gt; birçok protokolün toplandığı bir protokoller ailesidir. Bu referans modeline en çok kullanılan iki protokolün ismi verilmiştir; TCP (Transmission Control Protocol) ve IP (Internet Protocol). Bu referans modelinde 4 farklı katmanda 15’ten fazla protokol vardır. Veriler bu katmanlar arasında sırasıyla paketlenerek gönderilir, alıcıda ise paketlemenin tersi sırayla teker teker açılarak veri ulaştırılmış olur.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;► Protokol:&lt;/strong&gt; Protokoller cihazlar arası iletişimde kullanılan, iletişim kurallarını belirleyen ağ dilleridir. Referans modelinin her katmanda ayrı protokoller görev yapar. Farklı referans modellerinde aynı protokoller çalışabilir.&lt;/p&gt;

&lt;h2 id=&#34;tcp-ip-referans-modeli-katmanları&#34;&gt;TCP/IP Referans Modeli Katmanları&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/vXJSOn0&#34;&gt;&lt;img src=&#34;http://i.imgur.com/vXJSOn0.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;► Uygulama katmanı:&lt;/strong&gt; Bu katmanda gönderilecek veri tipi ve veriyi işleyen uygulamalar bulunur. Örneğin bir HTML web sayfası ve bu veri tipini kullanan HTTP protokolü bu katmandadır. OSI modelindeki sunum ve oturum katmanları TCP/IP modelinde uygulama katmanı içerisinde yer alır. E-Posta gönderimi için kullanılan SMTP ve dosya gönderimi için kullanılan FTP protokolleri bu katmanda bulunur.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;► Taşıma katmanı:&lt;/strong&gt; Bu katmanda verinin nasıl gönderileceği belirlenir. Veri güvenliği, hata kontrolü gibi işlemler yapılır. TCP ve UDP bu katmandadır. TCP klasik veri aktarımında UDP ise medya aktarımında kullanılır. TCP, UDP ye göre daha güvenli fakat daha yavaş çalışır. Çünkü TCP ‘de gönderilen her veri paketinin ardından verinin yerine doğru bir şekilde ulaşıp ulaşmadığı kontrol edilir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;► Ağ katmanı:&lt;/strong&gt; IP katmanı olarak da adlandırılan bu katman da verilerin gideceği adres veriye eklenir yani veri bu katmandan gönderilir ve yönlendirilir. IPv4 ün gelecekte yetersiz kalma durumuna karşı IPv6 sistemine geçmek için çalışmalar başlatılmıştır.IPv4 32 bit iken IPv6 ile 128 bitlik adresler kullanılacak. Bu sayede daha fazla cihaza IP adresi atanabilecek.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;► Fiziksel katman:&lt;/strong&gt; Bu katman verinin hangi yolla gönderileceği belirlenir. İletişim ortamının özelliklerini, haberleşme hızını ve kodlama şemasını belirler. Ethernet, Wi-Fi, Token Ring, ATM gibi protokoller bu katmanda çalışır.&lt;/p&gt;

&lt;h2 id=&#34;katmanlar-ve-protokoller-nasıl-işler&#34;&gt;Katmanlar ve Protokoller Nasıl İşler?&lt;/h2&gt;

&lt;p&gt;Örneğin bir web sayfası bilgisayarınıza şu şekilde gelir;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;► Web sayfasının saklı olduğu sunucuda uygulamalar sayfanın HTML veri formatında bir çıktısını oluşturur. Ve bu veriyi HTTP protokolüyle gönder komutunu verir. Bunlar 4. katmanda yani uygulama katmanında olur. Buradan çıkan veri 3. katmana yani taşıma katmanına gönderilir.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;► Taşıma katmanında veriye taşıma katmanının bilgileri yani port bilgisi ve veri boyutu eklenir.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;► Üçüncü katmandan çıkan veri paketine ikinci katmanda verinin gönderileceği bilgisayarın (sunucunun) ve sizin bilgisayarınızın IP adresleri ve verinin son halinin boyutu eklenir.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;► Son katmanda yani fiziksel katmanda fiziksel adresler ve verinin yeni boyutu pakete eklenir.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;► Paket sunucudan çıkar ve sunucu ile sizin bilgisayarınız arasındaki binlerce kilometrelik yolu kat ederek bilgisayarınıza ulaşır.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/rQQwnvv&#34;&gt;&lt;img src=&#34;http://i.imgur.com/rQQwnvv.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Veri bilgisayarınıza ulaştığında bu sefer tersi sırayla katmanlardaki protokoller işletilir. Bilgisayarınız önce fiziksel katmanı ardından ağ katmanını, daha sonra taşıma ve uygulama katmanlarını işletir. Ve en sonunda kalan paketi web tarayıcınıza gönderir. Her katmanda ayrı donanımlar görev yapar. Fiziksel katmanda Switch, ağ katmanında Router, taşıma katmanında ise NAT gibi donanımlar kullanılır.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.elektrikport.com/teknik-kutuphane/tcpip-nasil-calisir/9004&#34;&gt;Kaynak&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Library &amp; Bintray</title>
      <link>http://yazilim.aykutasil.com/2017/01/android-library--bintray/</link>
      <pubDate>Wed, 11 Jan 2017 17:27:29 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/android-library--bintray/</guid>
      <description>&lt;p&gt;Android uygulaması yazarken bazı oluşturmuş olduğunuz yapıları tekrar tekrar yazmak durumunda kalıyorsanız, sizin de artık kendi kütüphanenizi yazmanızın zamanı gelmiş geçiyor demektir. Böyle bir durum söz konusu olmak zorunda değil tabi library oluşturmak için 🙂&lt;/p&gt;

&lt;p&gt;Bu yazının konusu Android Library oluşturmak, oluşturmuş olduğumuz bu kütüphaneyi &lt;strong&gt;maven&lt;/strong&gt; ve &lt;strong&gt;jcenter&lt;/strong&gt; repository e deploy etmek olucak.&lt;/p&gt;

&lt;p&gt;Ve başlayabiliriz.&lt;/p&gt;

&lt;p&gt;İlk olarak &lt;strong&gt;Android Studio&lt;/strong&gt; yu açarak &lt;strong&gt;File &amp;gt; New &amp;gt; New Project&lt;/strong&gt; e tıklayıp yeni bir proje oluşturalım.&lt;/p&gt;

&lt;p&gt;Daha sonra oluşturmuş olduğunuz app e sağ tıklayıp &lt;strong&gt;New &amp;gt; Module&lt;/strong&gt; sekmesinden gerekli yerleri doldurup projemize ekleyelim.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/PQRghY8&#34;&gt;&lt;img src=&#34;http://i.imgur.com/PQRghY8.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/IV1YJmw&#34;&gt;&lt;img src=&#34;http://i.imgur.com/IV1YJmw.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/nQHzaY7&#34;&gt;&lt;img src=&#34;http://i.imgur.com/nQHzaY7.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oluşturmuş olduğumuz module içerisine kodlarımızı yazıyoruz. Module ümüzün sanki bir projeymiş gibi kendine ait dosyaları vardır. Yani kendine ait bir AndroidManifest.xml dosyası , kendine ait drawable klasörü vs. vardı. İstediğimiz şekilde özelleştirme yapabilir ve istediğimiz herhangi bir projede bu kodları kullanabiliriz.(Zaten yapılmış olanları bu şekilde kullanıyoruz. Neyin nasıl yapıldığını anlamak her zaman için ufkumuzu genişletecektir…)&lt;/p&gt;

&lt;p&gt;Kodlarımızı yazdık. Sıra geldi module ümüzün gradle dosyasını düzenlemeye.&lt;/p&gt;

&lt;p&gt;Ama bundan önce Project düzeyindeki gradle dosyasını güncellememiz gerekli.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath &#39;com.android.tools.build:gradle:2.1.0&#39;
        classpath &#39;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4&#39;
        classpath &#39;com.github.dcendents:android-maven-gradle-plugin:1.3&#39;
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/3uET4kz&#34;&gt;&lt;img src=&#34;http://i.imgur.com/3uET4kz.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ve module ümüzün &lt;strong&gt;gradle&lt;/strong&gt; dosyasını düzenliyoruz.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apply plugin: &#39;com.android.library&#39;
apply plugin: &#39;com.github.dcendents.android-maven&#39; // maven repository e eklememiz için gerekli gradle plugin
apply plugin: &amp;quot;com.jfrog.bintray&amp;quot; // bintray yapılandırması yapmamız için gerekli gradle plugin
// Kodların devamında göreceğiniz hazır yazılmış gradle tasklerini getiren yapıda, güncellenmesi gereken yerleri
// bu şekilde düzenliyoruz.
ext {
    PUBLISH_GROUP_ID = &#39;com.aykuttasil&#39;
    PUBLISH_ARTIFACT_ID = &#39;androidbasichelper&#39;
    PUBLISH_VERSION = &#39;1.0.0&#39;
}

android {
    compileSdkVersion 23
    buildToolsVersion &amp;quot;23.0.3&amp;quot;

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 23
        versionCode 1
        versionName &amp;quot;1.0.0&amp;quot;
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;
        }
    }
}

// Oluşturmuş olduğumuz kütüphane aşağıdaki bağımlılıklara sahip. Sanki bir uygulama geliştiriyormuş gibi 
// bağımlılık dosyalarını ekliyoruz.
dependencies {
    testCompile &#39;junit:junit:4.12&#39;
    compile &#39;com.android.support:appcompat-v7:23.4.0&#39;
    compile &#39;com.afollestad.material-dialogs:core:0.8.5.9&#39;
    compile &#39;com.joanzapata.iconify:android-iconify-fontawesome:2.1.1&#39;
    compile &#39;com.android.support:appcompat-v7:23.4.0&#39;
    compile &#39;com.android.support:design:23.4.0&#39;
}

// Aşağıda ki linke girip bakarsanız aslında gradle task yazılmış olduğunu görürsünüz. Bu yazılan task ler ile
// oluşturmuş olduğumuz module dosyalarından gerekli dosyalara dönüşümlerini sağlıyoruz.
apply from: &#39;https://raw.githubusercontent.com/blundell/release-android-library/master/android-release-aar.gradle&#39;

def siteUrl = &#39;https://github.com/aykuttasil/AndroidBasicHelper&#39;      // Homepage URL of the library
def gitUrl = &#39;https://github.com/aykuttasil/AndroidBasicHelper.git&#39;   // Git repository URL
group = &amp;quot;com.aykuttasil&amp;quot;

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging &#39;aar&#39;

                name &#39;com.aykuttasil:androidbasichelper&#39; // TODO
                description = &#39;Android Basic Helper&#39; // TODO
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name &#39;The Apache Software License, Version 2.0&#39;
                        url &#39;http://www.apache.org/licenses/LICENSE-2.0.txt&#39;
                    }
                }
                developers {
                    developer {
                        id &#39;aykuttasil&#39; // TODO
                        name &#39;Aykut Asil&#39; // TODO
                        email &#39;aykuttasil@gmail.com&#39; // TODO
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/NPUZYLU&#34;&gt;&lt;img src=&#34;http://i.imgur.com/NPUZYLU.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/waSW8fe&#34;&gt;&lt;img src=&#34;http://i.imgur.com/waSW8fe.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Evet gradle dosyalarını düzenledik. Sıra geldi çalıştırmaya.&lt;/p&gt;

&lt;p&gt;Bunun için Android Studio içerisinde ki Terminal kısmına giriyoruz ya da mac in kendi Terminal ini açarak projemizin dizinine giriyoruz.&lt;/p&gt;

&lt;p&gt;Ve aşağıdaki komutu giriyoruz.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./gradlew clean build generateRelease&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/qd5tC3N&#34;&gt;&lt;img src=&#34;http://i.imgur.com/qd5tC3N.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/hIScB2P&#34;&gt;&lt;img src=&#34;http://i.imgur.com/hIScB2P.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/D48QUqE&#34;&gt;&lt;img src=&#34;http://i.imgur.com/D48QUqE.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/cgp1Abp&#34;&gt;&lt;img src=&#34;http://i.imgur.com/cgp1Abp.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Evet işlemimize başarılı bir şekilde tamamladık ve gerekli dosyaların oluşturulmasını sağladık.&lt;/p&gt;

&lt;p&gt;Projemizi oluşturduğumuz klasöre gidelim ve &lt;strong&gt;ModuleName &amp;gt; build&lt;/strong&gt; içerisine girerek oluşturulan zip dosyasını  görebiliriz. Bu zip dosyasının içini açarak oluşturulan dosyaları görebilirsiniz. Ve maven repository e bu zip dosyasını ekliceğimizi unutmayın.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/id0McpR&#34;&gt;&lt;img src=&#34;http://i.imgur.com/id0McpR.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Sıra geldi kütüphanemizi maven ve jcenter repository e deploy etmeye.&lt;/p&gt;

&lt;p&gt;İlk olarak &lt;a href=&#34;https://bintray.com/&#34;&gt;https://bintray.com/&lt;/a&gt; adresine girerek üyeliğimizi oluşturuyoruz. Ve sırasıyla aşağıdaki işlemleri yapıyoruz.&lt;/p&gt;

&lt;p&gt;Hesabımızı oluşturduktan sonra &lt;strong&gt;maven&lt;/strong&gt; içerisine girerek &lt;strong&gt;Add New Package&lt;/strong&gt; diyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/AGY1vSx&#34;&gt;&lt;img src=&#34;http://i.imgur.com/AGY1vSx.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aşağıdaki alanlara gerekli bilgileri giriyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/82CCD5F&#34;&gt;&lt;img src=&#34;http://i.imgur.com/82CCD5F.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Daha sonra oluşturmuş olduğumuz package ın içerisine girerek &lt;strong&gt;New Version&lt;/strong&gt; a tıklıyoruz ve &lt;strong&gt;1.0.0&lt;/strong&gt; şeklinde ya da istediğiniz şekilde Name  i düzenliyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/7qNM2aj&#34;&gt;&lt;img src=&#34;http://i.imgur.com/7qNM2aj.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/1bC8KSi&#34;&gt;&lt;img src=&#34;http://i.imgur.com/1bC8KSi.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oluşturmuş olduğumuz versiyon içerisine girerek &lt;strong&gt;Upload Files&lt;/strong&gt; diyoruz ve daha önce oluşturduğumuz &lt;strong&gt;zip&lt;/strong&gt; dosyasını seçerek upload işlemini tamamlıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/T2oG4DP&#34;&gt;&lt;img src=&#34;http://i.imgur.com/T2oG4DP.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/w99RPib&#34;&gt;&lt;img src=&#34;http://i.imgur.com/w99RPib.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kütüphanemizi &lt;strong&gt;maven&lt;/strong&gt; respository yüklemiş bulunmaktayız.&lt;/p&gt;

&lt;p&gt;Fakat Android Studio default olarak &lt;strong&gt;jcenter&lt;/strong&gt; resository kullanmakta. Biz de bu yüzden birkaç işlem daha yapmalıyız ki geliştiriciler kolayca, tek satır ekleyerek kütüphanemizi kullanmaya başlasınlar.&lt;/p&gt;

&lt;p&gt;Aşağıda ki sayfaya gelerek &lt;strong&gt;Add to jCenter&lt;/strong&gt; butonuna tıklıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/lMQR4kl&#34;&gt;&lt;img src=&#34;http://i.imgur.com/lMQR4kl.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ve aşağıdaki gibi gerekli yerleri doldurarak işlemimizi tamamlıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/GK7Eq9d&#34;&gt;&lt;img src=&#34;http://i.imgur.com/GK7Eq9d.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not :&lt;/strong&gt; Kütüphanemizin kullanımı için birkaç saat beklememiz gerekmektedir. Olmadı diye telaş yapıp kafayı yemeyin 😉&lt;/p&gt;

&lt;p&gt;Bu arada oluşturmuş olduğumuz kütüphanemize aşağıda ki linkten erişip projelerinizde gönül rahatlığıyla kullanabilirsiniz 🙂&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Gradle :&lt;/strong&gt; &lt;code&gt;compile ‘com.aykuttasil:androidbasichelper:1.0.0’&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;GitHub :&lt;/strong&gt; &lt;a href=&#34;https://github.com/aykuttasil/AndroidBasicHelper&#34;&gt;https://github.com/aykuttasil/AndroidBasicHelper&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Yukarıda ki yöntem ile local inizde &lt;strong&gt;aar&lt;/strong&gt; dosyası oluşturarak manuel bir şekilde bu aar yi repository lere yükleyebilirsiniz.&lt;/p&gt;

&lt;p&gt;Peki bunu sadece birkaç komuta indirgesek ve otomatik yüklemeyi sağlasak nasıl olur ? Bencede güzel olur.&lt;/p&gt;

&lt;p&gt;Yukarıda ki yöntemin yine bir benzeri (daha okunabilir ve kolay) ve artı ilaveleri şeklinde devam edelim.&lt;/p&gt;

&lt;p&gt;Yeni dosya yapımız ve gradle dosyalarımızı yeri aşağıdaki resimdeki gibi olmalı. Burada 3 adet kendimizin oluşturduğu gradle dosyasını görüyorsunuz gradle klasörünün altında. Diğer gradle lar zaten Android Studio tarafından oluşturuluyor.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/cQyvhZb&#34;&gt;&lt;img src=&#34;http://i.imgur.com/cQyvhZb.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;build.gradle&lt;/strong&gt; dosyalarımızın içeriği aşağıdaki gibidir.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/0M6faiE&#34;&gt;&lt;img src=&#34;http://i.imgur.com/0M6faiE.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/fO5aXX8&#34;&gt;&lt;img src=&#34;http://i.imgur.com/fO5aXX8.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ext {
    bintrayRepo = &#39;maven&#39; // maven reposu olduğunu belirtiyoruz
    bintrayName = &#39;basic-helper&#39; 
    orgName = &#39;aykuttasil&#39;

    publishedGroupId = &#39;com.aykuttasil&#39;
    libraryName = &#39;Android Basic Helper&#39;
    artifact = &#39;androidbasichelperlib&#39; // module ile aynı isimde olması gerekiyor !!

    libraryDescription = &#39;Android Basic Helper&#39;

    siteUrl = &#39;https://github.com/aykuttasil/AndroidBasicHelper&#39; 
    gitUrl = &#39;https://github.com/aykuttasil/AndroidBasicHelper.git&#39;

    libraryVersion = rootProject.ext.libraryVersion

    developerId = &#39;aykuttasil&#39;
    developerName = &#39;Aykut Asil&#39;
    developerEmail = &#39;aykuttasil@gmail.com&#39;

    licenseName = &#39;The Apache Software License, Version 2.0&#39;
    licenseUrl = &#39;http://www.apache.org/licenses/LICENSE-2.0.txt&#39;
    allLicenses = [&amp;quot;Apache-2.0&amp;quot;]
}

if (project.rootProject.file(&#39;local.properties&#39;).exists()) {
    apply from: rootProject.file(&#39;gradle/install-v1.gradle&#39;)
    apply from: rootProject.file(&#39;gradle/bintray-android-v1.gradle&#39;)
}


// ./gradlew clean install bintrayUpload
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;ext {
    sdk = 24
    buildTools = &amp;quot;24.0.1&amp;quot;
    minSdk = 17
    libraryVersion = &amp;quot;1.0.20&amp;quot;
    libraryVersionCode = 11
    supportVersion = &amp;quot;24.2.0&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Aşağıda ki resimde gördüğünüz gibi (Android Studio Project görünümüne geçmelisiniz) 3 adet gradle dosyamızı hazırladık. Kod kalabalığı olmasın ve neyin nerede olduğu belli olsun diye bu şekilde yaptık. Yoksa direk build.gradle dosyamızın içine de yazabilirdik.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/6coc2bg&#34;&gt;&lt;img src=&#34;http://i.imgur.com/6coc2bg.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apply plugin: &#39;com.github.dcendents.android-maven&#39;

group = publishedGroupId                               // Maven Group ID for the artifact

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging &#39;aar&#39;
                groupId publishedGroupId
                artifactId artifact

                // Add your description here
                name libraryName
                description libraryDescription
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name licenseName
                        url licenseUrl
                    }
                }
                developers {
                    developer {
                        id developerId
                        name developerName
                        email developerEmail
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}
//from https://github.com/workarounds/bundler/blob/master/gradle/install-v1.gradle
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;apply plugin: &#39;com.jfrog.bintray&#39;

version = libraryVersion

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = &#39;sources&#39;
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = &#39;javadoc&#39;
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file(&#39;local.properties&#39;).newDataInputStream())

bintray {
    user = properties.getProperty(&amp;quot;bintray.user&amp;quot;)
    key = properties.getProperty(&amp;quot;bintray.apikey&amp;quot;)

    configurations = [&#39;archives&#39;]
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        userOrg = orgName
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = [&#39;Apache-2.0&#39;]
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty(&amp;quot;bintray.gpg.password&amp;quot;)
                //Optional. The passphrase for GPG signing&#39;
            }
        }
    }
}

//from https://github.com/workarounds/bundler/blob/master/gradle/bintray-java-v1.gradle
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;apply plugin: &#39;com.jfrog.bintray&#39;

version = libraryVersion

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = &#39;sources&#39;
}

task javadoc(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = &#39;javadoc&#39;
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file(&#39;local.properties&#39;).newDataInputStream())

bintray {
    user = properties.getProperty(&amp;quot;bintray.user&amp;quot;)
    key = properties.getProperty(&amp;quot;bintray.apikey&amp;quot;)

    configurations = [&#39;archives&#39;]
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        userOrg = orgName
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty(&amp;quot;bintray.gpg.password&amp;quot;)
                //Optional. The passphrase for GPG signing&#39;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tüm bu dosya yapısını hazırladıktan sonra bintray konfigürasyonu için birkaç işlem daha kaldı.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;local.properties&lt;/strong&gt; dosyamızın içine bintray bilgilerimizi giriyoruz. Bu bilgileri direk build.gradle içerisine girebilirdik fakat bu bilgilere sadece biz sahip olmalıyız 🙂 ve gitignore un içinde local.properties dosyasının ekli olduğuna dikkat edelim !!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/hSrkkEc&#34;&gt;&lt;img src=&#34;http://i.imgur.com/hSrkkEc.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bintray api key almak için bintray sitesine giderek gerekli sayfaya ulaşıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/bmNY7Is&#34;&gt;&lt;img src=&#34;http://i.imgur.com/bmNY7Is.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/Vot0Fkk&#34;&gt;&lt;img src=&#34;http://i.imgur.com/Vot0Fkk.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Evet tüm işlemler bu kadar.&lt;/p&gt;

&lt;p&gt;Artık terminalden aşağıdaki komutu yazarak otomatik yüklenmeyi sağlayabiliriz.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;./gradlew clean install bintrayUpload&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Runtime Permission</title>
      <link>http://yazilim.aykutasil.com/2017/01/android-runtime-permission/</link>
      <pubDate>Wed, 11 Jan 2017 17:24:52 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/android-runtime-permission/</guid>
      <description>&lt;p&gt;Yavaş yavaş mevcut android cihazlarının API level düzeyi doğal olarak yükselmekte ve bizlerinde tabi ki buna ayak uydurması gerekmekte.&lt;/p&gt;

&lt;p&gt;Bunlardan biri de Android M – Marshmallow (23) ile  gelen Runtime Permissions olayı.&lt;/p&gt;

&lt;p&gt;Kullanıcı açısından bakıldığında oldukça yararlı birşey gibi duruyor ama tabi ki biz kullanıcılar runtime sırasında çıkan permission dialog daki yazıyı ne kadar okuruz ve buna göre onay veririz meçhul. Aslına bakarsanız çok da okunacağını düşünmüyorum ama olsun yine de güzel. İlerleyen zamanlarda illa ki bu alışkanlığı edinecek insanlar olacaktır 😉&lt;/p&gt;

&lt;p&gt;Fazla uzatmadan birkaç link ve ipucu vericem.&lt;/p&gt;

&lt;p&gt;Android Runtime Permissions olayının nasıl yapıldığını görmek için&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Link : &lt;a href=&#34;https://github.com/googlesamples/android-RuntimePermissions&#34;&gt;https://github.com/googlesamples/android-RuntimePermissions&lt;/a&gt; burada süper bir örnek var.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Link : &lt;a href=&#34;http://android-developers.blogspot.com.tr/2015/08/building-better-apps-with-runtime.html&#34;&gt;http://android-developers.blogspot.com.tr/2015/08/building-better-apps-with-runtime.html&lt;/a&gt; burada kısa bir özet var.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Takıldığınız yeri yorumlarda belirtebilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not :&lt;/strong&gt; Örneği incelediğiniz de şu satırı yazarken dikkat edin.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ActivityCompat.requestPermissions(this, new String[]{android.Manifest.permission.CAMERA},123456);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;burada sadece&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Manifest.permission.CAMERA&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;yerine&lt;/p&gt;

&lt;p&gt;&lt;code&gt;android.Manifest.permission.CAMERA&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;kullanacaksınız. Yoksa izin listesini bulamaz.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
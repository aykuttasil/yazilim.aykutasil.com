<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software</title>
    <link>http://yazilim.aykutasil.com/categories/yazilim/index.xml</link>
    <description>Recent content on Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr-tr</language>
    <atom:link href="http://yazilim.aykutasil.com/categories/yazilim/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Retrofit Multipart File Upload</title>
      <link>http://yazilim.aykutasil.com/2017/01/retrofit-multipart-file-upload/</link>
      <pubDate>Wed, 11 Jan 2017 01:50:51 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/retrofit-multipart-file-upload/</guid>
      <description>

&lt;h1 id=&#34;retrofit-multipart-file-upload&#34;&gt;Retrofit Multipart File Upload&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    @DebugLog
    public BelgeResponse BelgeSync(BelgeRequest request, String apiVersion, String appVersion) {
        try {

            Map&amp;lt;String, RequestBody&amp;gt; map = new HashMap&amp;lt;&amp;gt;();
            String belgeDirPath = SuperHelper.getInternalIztopBelgeDir(mContext, request.getGonderiNo());
            File belgeDir = new File(belgeDirPath);
            boolean isDir = belgeDir.isDirectory();
            if (isDir) {
                File[] files = belgeDir.listFiles();
                for (File file : files) {
                    RequestBody requestBody = RequestBody.create(MediaType.parse(&amp;quot;image/jpg&amp;quot;), file);
                    map.put(&amp;quot;file\&amp;quot;; filename=\&amp;quot;&amp;quot; + file.getName(), requestBody);
                }
            }

            //RequestBody requestBodyGonderiNo = RequestBody.create(MediaType.parse(&amp;quot;text/plain&amp;quot;), request.getGonderiNo());
            //RequestBody requestBodyMusId = RequestBody.create(MediaType.parse(&amp;quot;text/plain&amp;quot;), String.valueOf(request.getMusId()));

            RestClient restClient = RestClient.getInstance();
            Call&amp;lt;BelgeResponse&amp;gt; responseCall = restClient.getApiService().Belge(
                    apiVersion,
                    appVersion,
                    request.getGonderiNo(),
                    String.valueOf(request.getMusId()),
                    map);
            BelgeResponse resp = responseCall.execute().body();
            return resp;
        } catch (Exception ex) {
            SuperHelper.CrashlyticsLog(ex);
            return null;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Android GcmNetworkManager Kullanımı</title>
      <link>http://yazilim.aykutasil.com/2017/01/android-gcmnetworkmanager-kullan%C4%B1m%C4%B1/</link>
      <pubDate>Wed, 11 Jan 2017 01:43:53 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/android-gcmnetworkmanager-kullan%C4%B1m%C4%B1/</guid>
      <description>&lt;p&gt;GcmNetworkManager kullanarak Android de network tabanlı işlemlerinizi olabildiğince kontrollü bir şekide yapabilirsiniz.&lt;/p&gt;

&lt;p&gt;GcmNetworkManager ın kullanım alanı daha çok asenkron ve periodic network işlemlerinizi yapılandırmaktır.&lt;/p&gt;

&lt;p&gt;Tek sefer çalışacak veya Periodic olarak çalışacak işlemleriniz için 2 tip belirlenmiştir.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OneoffTask&lt;/li&gt;
&lt;li&gt;PeriodicTask&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;OneoffTask Kullanımı&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;OneoffTask oneoff = new OneoffTask.Builder()
        // Uygulamanızı kapatsanız bile tekrar açtığınız da network işleminiz işleme konulur.
        // Yani isteğinizin kalıcı olup olmamasını bu parametre ile ayarlayabilirsiniz.
        .setPersisted(true)
        // Belirtilen network işlemlerinin çalışacağı service i belirtir.
        .setService(MyGcmTaskService.class)
        // İşleminiz için tag belirleyebilirsiniz.
        // Aynı tag ile yeni bir istek yaptığınız da &#39;.setUpdateCurrent(true)&#39; olarak belirlenmiş ise isteğinizi yeni istek ile günceller. Yani eski isteğiniz geçersiz olacaktır. &#39;setUpdateCurrent(false)&#39; olarak belirlenir ise aynı tag ile yeni istekte bulunsanız bile her iki isteğiniz de çalışacaktır. 
        .setTag(tag)
        // Network isteğinizin çalışma zamanı parametrelerini belirler
        .setExecutionWindow(0, 10)
        // İşleminiz için internet gerekliliği veya wireless gerekliliği parametrelerini belirler
        .setRequiredNetwork(required_network_state)
        // İşleminiz için cihazın şarja bağlı olup olmaması gerekliliğini belirler
        .setRequiresCharging(false)
        // Aynı tag ile yeni istek yapıldığı takdirde güncellenip güncellenmemesi durumunu belirler
        .setUpdateCurrent(true)
        // Bundle ile işleminiz için gerekli parametreleri belirleyebilirsiniz
        .setExtras(bundle)
        // build eder
        .build();

GcmNetworkManager.getInstance(context).schedule(oneoff);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;MyGcmTaskService&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Cihazınızı yeniden başlatma gibi durumlar da önceden belirlenmiş task lerinizin çalışmasını devam ettirmesini istiyorsanız
// burada tekrar belirlemelisiniz.
@Override
public void onInitializeTasks() {
    
}

// GcmNetworkManager ın kendi algoritması ile seçilen, tanımlamış olduğunuz istek bu kod bloğuna girecek.
@Override
public int onRunTask(TaskParams taskParams) {
    try {
        Bundle bundle = taskParams.getExtras();
        return SchedulerRandevuTask(bundle);        
    } catch (Exception e) {
        ErrorEvent errorEvent = new ErrorEvent();
        errorEvent.setErrorContent(e.getMessage());
        EventBus.getDefault().post(errorEvent);
        return GcmNetworkManager.RESULT_RESCHEDULE;
    }
}

private int SchedulerZiyaretTask(Bundle bundle) {
    try {
        // isteğimiz sırasında bundle olarak yüklemiş olduğumuz nesneyi burada yakalıyoruz
        String jsonModel = bundle.getString(Const.IZTOP_TASK_BUNDLE);
        ZiyaretRequest request = new Gson().fromJson(jsonModel, ZiyaretRequest.class);
        ZiyaretResponse ziyaretResponse = sendZiyaretProcess(request);
        switch (ziyaretResponse.getCode()) {
            case 0: {
                EventBus.getDefault().post(ziyaretResponse);                
                // işlemlerimiz başarılı bir şekilde gerçekleşmiş ise result değeri olarak RESULT_SUCCESS dönüyoruz.
                // GcmNetworkManager bu işlemi başarılı olduğu için listeden silecek ve tekrar çalıştırmayı denemicektir.
                return GcmNetworkManager.RESULT_SUCCESS;
            }
            default: {
                // işlemlerimiz başarısız olması durumunda ( burada sunucuya istekte bulunulmuş ve dönen değer 0 değil ise başarısız olarak belirlenmiştir )isteğin tekrar çalışması için result değeri olarak RESULT_RESCHEDULE dönüyoruz.
                return GcmNetworkManager.RESULT_RESCHEDULE;
            }
        }
    } catch (Exception e) {
        SuperHelper.CrashlyticsLog(e);
        e.printStackTrace();
        return GcmNetworkManager.RESULT_RESCHEDULE;
    }


}
private ZiyaretResponse sendZiyaretProcess(ZiyaretRequest request) {
    return ApiManager.getInstance(getApplicationContext()).Ziyaret(request);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ApiManager / Ziyaret&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public ZiyaretResponse Ziyaret(ZiyaretRequest request) {
    try {
        RestClient restClient = RestClient.getInstance();
        Call&amp;lt;ZiyaretResponse&amp;gt; responseCall = restClient.getApiService().Ziyaret(request);
        ZiyaretResponse ziyaretResponse = responseCall.execute().body();
        return ziyaretResponse;
    } catch (Exception ex) {
        return null;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Retrofit ApiService&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@POST(&amp;quot;sunucu/ziyaret/api/adresi&amp;quot;)
Call&amp;lt;ZiyaretResponse&amp;gt; Ziyaret(@Body ZiyaretRequest ziyaretRequest);&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Android SMS Receiver</title>
      <link>http://yazilim.aykutasil.com/2017/01/android-sms-receiver/</link>
      <pubDate>Wed, 11 Jan 2017 01:42:54 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/android-sms-receiver/</guid>
      <description>

&lt;h1 id=&#34;android-sms-receiver&#34;&gt;Android SMS Receiver&lt;/h1&gt;

&lt;p&gt;Android de gelen sms leri dinlemek ve uygulamanızın akışını gelen sms lere göre şekillendirmek için aşağıdaki yapıyı kullanabilirsiniz.&lt;/p&gt;

&lt;p&gt;İlk olarak AndroidManifest.xml dosyanızda receiver tanımlamalısınız. Fakat biz bu receiver ı dinamik olarak tanımlıcaz. Bunu yapmamızın sebebi SMS i dinledikten sonra bu receiver ı silmek ve daha sonra gelen SMS lerin dinlenmesini önlemek.&lt;/p&gt;

&lt;p&gt;Siz uygulamınız da sürekli bir SMS dinlemeye ihtiyaç duyarsanız receiver ı AndroidManifest.xml dosyanızda tanımlamalısınız.&lt;/p&gt;

&lt;p&gt;Biz burda SMS dinlemesi yaparken önlem amaçlı olarak CPU nun uyumasını önlüyoruz. Eğer bir işlem sonucunda sms gelmesini bekliyorsak, beklediğimiz SMS  geciktiği takdirde ve bu sırada cihazın ekranını vs. kapattığımız da Android cihazımız kendini uyku moduna almak isteyecektir. Bunu önlemek için &lt;strong&gt;WakefulBroadcastReceiver&lt;/strong&gt; yapısını kullanıyoruz. Bu yapı aslında Android in WakeLock özelliğini kullanan serviceler için özel olarak tasarlanmış  bir yapıdır. Cihazı uyanık tutar ve işimiz bittiği takdirde bu WakeLock u kaldırmamız gerekir. Bunu da service in içerisinde tanımlarız.&lt;/p&gt;

&lt;p&gt;Aşağıdaki fonksiyonu Activity miz içerisinde ihtiyacımız olan yerde çağırır ve SMS receiver ı çalıştırmıış oluruz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LoginActivity&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void RegisterSmsReceiver() {
    SmsReceiver smsReceiver = new SmsReceiver();
    IntentFilter intentFilter = new IntentFilter(&amp;quot;android.provider.Telephony.SMS_RECEIVED&amp;quot;);
    android.os.Handler handler = new android.os.Handler();
    registerReceiver(smsReceiver, intentFilter, &amp;quot;android.permission.GET_TASKS&amp;quot;, handler);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;SmsReceiver&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class SmsReceiver extends WakefulBroadcastReceiver {

    private static final String TAG = &amp;quot;SmsReceiver&amp;quot;;

    public SmsReceiver() {
        super();
    }

    @Override
    public void onReceive(Context context, Intent intent) {
        Intent myIntent = intent;
        myIntent.setClass(context, SmsReceiverService.class);

        // startWakeFulService ile AndroidManifest.xml dosyamız içerisinde tanımlamış olduğumuz Service e yönlendiriyoruz.
        // Ve cihazın uyanık kalmasını sağlıyoruz.
        startWakefulService(context, myIntent);

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;AndroidManifest.xml&lt;/strong&gt; dosyasında  Service imizi  tanımlıyoruz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;service
    android:name=&amp;quot;.SmsReceiverService&amp;quot;
    android:exported=&amp;quot;false&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;exported=”false”&lt;/code&gt; tanımı servisin cihazda ki diğer uygulamalar tarafından çalıştırılamayacağını belirtir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SmsReceiverService&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class SmsReceiverService extends IntentService {

    private static final String TAG = &amp;quot;SmsReceiverService&amp;quot;;
    private Context context;

    public SmsReceiverService() {
        super(TAG);
    }

    @Override
    public void onCreate() {
        super.onCreate();
        context = getApplicationContext();
    }


    @Override
    protected void onHandleIntent(Intent intent) {

        String msg_from = null;
        String msgBody = null;
        if (intent.getAction().equals(&amp;quot;android.provider.Telephony.SMS_RECEIVED&amp;quot;)) {
            Bundle bundle = intent.getExtras();           //---get the SMS message passed in---
            SmsMessage[] msgs = null;

            if (bundle != null) {
                //---retrieve the SMS message received---
                try {
                    Object[] pdus = (Object[]) bundle.get(&amp;quot;pdus&amp;quot;);
                    msgs = new SmsMessage[pdus.length];
                    for (int i = 0; i &amp;lt; msgs.length; i++) {
                        msgs[i] = SmsMessage.createFromPdu((byte[]) pdus[i]);
                        msg_from = msgs[i].getOriginatingAddress();
                        msgBody = msgs[i].getMessageBody();

                    }
                } catch (Exception e) {
                     // Log.d(&amp;quot;Exception caught&amp;quot;,e.getMessage());
                }
            }
        }

        SmsEvent smsEvent = new SmsEvent();
        smsEvent.setActivationCode(&amp;quot;357&amp;quot;);
        smsEvent.setMsgBody(msgBody);
        smsEvent.setMsgFrom(msg_from);

        // EventBus ile sonucu istediğimiz yere gönderebiliriz.
        EventBus.getDefault().post(smsEvent);

        // Service in işini tamamladığını ve artık cihazın WakeLock u serbest bırakabileceğini söylüyoruz.
        SmsReceiver.completeWakefulIntent(intent);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;SmsEvent&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class SmsEvent {
    private String activationCode;
    private String msgFrom;
    private String msgBody;


    public String getActivationCode() {
        return activationCode;
    }

    public void setActivationCode(String activationCode) {
        this.activationCode = activationCode;
    }

    public String getMsgFrom() {
        return msgFrom;
    }

    public void setMsgFrom(String msgFrom) {
        this.msgFrom = msgFrom;
    }

    public String getMsgBody() {
        return msgBody;
    }

    public void setMsgBody(String msgBody) {
        this.msgBody = msgBody;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Android Internet Connection Receiver </title>
      <link>http://yazilim.aykutasil.com/2017/01/android-internet-connection-receiver/</link>
      <pubDate>Wed, 11 Jan 2017 01:42:36 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/android-internet-connection-receiver/</guid>
      <description>&lt;p&gt;Uygulamanızın akışını internet kontrolü yaparak yönetmeniz gerekebilir.&lt;/p&gt;

&lt;p&gt;Bunun için ilk olarak AndroidManifest.xml dosyasına receiver tanımı yapmalısınız.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;receiver android:name=&amp;quot;.InternetConnectionReceiver&amp;quot;&amp;gt;
    &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&amp;quot;android.net.conn.CONNECTIVITY_CHANGE&amp;quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/receiver&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;InternetConnectionReceiver&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class InternetConnectionReceiver extends BroadcastReceiver {


    @Override
    public void onReceive(Context context, Intent intent) {

        if (CheckConnection(context)) {

        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda tanımlanmış olan receiver, cihazın ağ yapısında herhangi bir değişiklik olduğunda bunu yakalar. Örneğin wireless açıkken kapattığınız da veya kapalıyken açtığınız da bunu yakayabilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CheckConnection&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static boolean checkConnection(Context con) {
    ConnectivityManager cm = (ConnectivityManager) con.getSystemService(Context.CONNECTIVITY_SERVICE);
    NetworkInfo netInfo = cm.getActiveNetworkInfo();
    return netInfo != null &amp;amp;&amp;amp; netInfo.isConnectedOrConnecting();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda ki kod bloğu da cihazın internete bağlı olması durumunu kontrol eder.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Postman ile API Test Yazımı</title>
      <link>http://yazilim.aykutasil.com/2017/01/postman-ile-api-test-yaz%C4%B1m%C4%B1/</link>
      <pubDate>Wed, 11 Jan 2017 01:09:39 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/postman-ile-api-test-yaz%C4%B1m%C4%B1/</guid>
      <description>

&lt;h1 id=&#34;postman&#34;&gt;POSTMAN&lt;/h1&gt;

&lt;p&gt;Postman HTTP Request lerinizi istediğiniz şekilde düzenleyip çalıştırabileceğiniz ve test edebileceğiniz bir Chrome eklentisidir.&lt;/p&gt;

&lt;p&gt;Bu &lt;a href=&#34;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop&#34;&gt;linkten&lt;/a&gt; Chrome a ekleyebilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Postman kullanarak API lerinizi test edebilirsiniz..&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Tek bir butona tıklayarak istediğiniz kadar Request i çalıştırabilir ve bu Requst lerden gelen değerleri başka bir Requestinize parametre olarak gönderebilrsiniz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/uNpJFK4&#34;&gt;&lt;img src=&#34;http://i.imgur.com/uNpJFK4.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yukarıdaki ekran Postman i yüklediğinizde açılan ilk ekrandır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enter request URL here&lt;/strong&gt; yazan kutucuğa End Point yani istek yapacağımız adres yazılır.&lt;/p&gt;

&lt;p&gt;Şuan &lt;strong&gt;GET&lt;/strong&gt; olarak gözüken yerden yapılacak olan istediğin cinsi seçilir.&lt;strong&gt;(POST , GET ,PUT ,DELETE vs.)&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Authorization&lt;/strong&gt; tabından Request gönderilecek adreste bir kimlik doğrulama var ise burdan gerekli parametreler girilebilir.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Headers&lt;/strong&gt; tabından yapılacak olan istekte bulunması gereken Header bilgileri girilir.(Content-Type gibi)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Body&lt;/strong&gt; tabından End Point i belirtilmiş adrese gönderilecek veriler girilir.Bu veriiler form-data , urlencoded , raw , binary şeklinde olabilir.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pre-request&lt;/strong&gt; script tabını  kullanarak istek yapmadan hemen önce otomatik olarak yapılacak işlemleri belirleyebiliriz.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tests&lt;/strong&gt; tabından yapılan isteklere ait çeşitli testler yazabiliriz.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ve &lt;strong&gt;SEND&lt;/strong&gt; butouna tıklayarak istek gönderilir.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;No Environment&lt;/strong&gt; yazan kısma tıklayarak farklı projeler için Environment tanımlayabilriz.Ve her proje kendine ait Environment  Variable ları kullanır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Environment variable&lt;/strong&gt; lar &lt;strong&gt;Global&lt;/strong&gt; olarak ta tanımlanabilir.Bu şekilde tanımlanmış variable lar tüm oluşturulmuş olan Environment lar içinden erişilebilir.&lt;/p&gt;

&lt;p&gt;Sabit environment lar oluşturmak için No Environment tabına tıklanarak bir Environment oluşturulur ve &lt;strong&gt;Manage Environment&lt;/strong&gt; diyerek sabit değişkenler oluşturulabilir.&lt;/p&gt;

&lt;p&gt;Dinamik olarak oluşturmak için Tests tabı kullanılır.&lt;/p&gt;

&lt;p&gt;Ve kullanım şekli :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;postman.setEnvironmentVariable(&amp;quot;key&amp;quot;,&amp;quot;value&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Global variable oluşturmak için:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;postman.setGlobalEnvironmentVariable(&amp;quot;key&amp;quot;,&amp;quot;value&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/xZwuAHQ&#34;&gt;&lt;img src=&#34;http://i.imgur.com/xZwuAHQ.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yukarıda görüldüğü gibi Requestimize ait sabit değerleri bu şekilde environment variable olarak kaydedebiliriz.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/LuJbfDN&#34;&gt;&lt;img src=&#34;http://i.imgur.com/LuJbfDN.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yukarıda görüldüğü gibi oluşturmuş olduğumuz environment variable ı adres çubuğunda kullandık.Ve url nin devamını kendimiz el ile yazdık.Response olarak dönen değeride yukarıda ki  gibi görebiliyoruz.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/jqkOC9D&#34;&gt;&lt;img src=&#34;http://i.imgur.com/jqkOC9D.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yaptığımız istek sonucu dönen Responsumuzu test etmeye geldi sıra.&lt;/p&gt;

&lt;p&gt;Yukarıda ki resimde gördüğünüz gibi gelen response değerinde status diye bir property bulunuyor  mu ? ve responce code değeri 200 mü ? diye basit bir test yazıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SEND&lt;/strong&gt; dediğimizde yazdığımız testlerde çalışacak ve Response sonucunu gördüğümüz ekranın üstünde bulunan Tests(&lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;) tabına tıklayarak test sonçlarını görebilicez.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Şimdi bir Blog yazısı kayıt etmeye çalışalım.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/iOr6a5D&#34;&gt;&lt;img src=&#34;http://i.imgur.com/iOr6a5D.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bu şekilde yazıp  &lt;strong&gt;SEND&lt;/strong&gt; e bastığımız da Response olarak Invalid hatası vericektir.Çünkü Authorization bilgilerini girmemizi istemektedir.Bunu yapabilmemiz aşağıdaki gibi bir token oluşturuyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/PIMTrVC&#34;&gt;&lt;img src=&#34;http://i.imgur.com/PIMTrVC.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/optSB3D&#34;&gt;&lt;img src=&#34;http://i.imgur.com/optSB3D.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ve oluşturduğumuz token bilgileriniz Blog post ederken kullanabilmek için &lt;strong&gt;Environment Variable&lt;/strong&gt; olarak atıyoruz.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Ve aşağıdaki gibi Blog Post değerlerimizi güncelliyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/XWxEZRv&#34;&gt;&lt;img src=&#34;http://i.imgur.com/XWxEZRv.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/5hcJ3kJ&#34;&gt;&lt;img src=&#34;http://i.imgur.com/5hcJ3kJ.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Bir Blog mesajı yazarken&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
 &amp;quot;post&amp;quot; : &amp;quot;Merhaba&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bu şekilde oluşturabileceğiniz gibi&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
 &amp;quot;post&amp;quot; : &amp;quot;{{token}}&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bu şekilde de kaydetmiş olduğunuz Environment Variable ları değer olarak atayabilirsiniz.&lt;/p&gt;

&lt;p&gt;Bu şekil de zincirleme reaksiyonlar oluşturabilir ve bir istek sonucu dönen değeri diğer isteğinize parametre olarak gönderebilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/3qNG7qq&#34;&gt;&lt;img src=&#34;http://i.imgur.com/3qNG7qq.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/LPrqyEn&#34;&gt;&lt;img src=&#34;http://i.imgur.com/LPrqyEn.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yukarıda görüldüğü gibi environment variable değerinizi Url nize parametre olarak yerleştirebilirsiniz.&lt;/p&gt;

&lt;p&gt;Postman de test yazarken kullanabileceğiniz ve çok yararlı olabilecek console.log u aktif etmek için bir kaç ayar yapmanız gerekmekte.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chromu u açın ve adres satırına chrome://flags  yazın.&lt;/li&gt;
&lt;li&gt;Çıkan pencerece “package” diye arama yapın (CTRL + F)&lt;/li&gt;
&lt;li&gt;Ve  #debug-packed-apps  enable yapın.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/hMi6dle&#34;&gt;&lt;img src=&#34;http://i.imgur.com/hMi6dle.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Şimdi Postman ekranına gelin ve herhangi bir yere sağ tıklayarak öğeyi denetle diyin ve Console tabını açın.&lt;/p&gt;

&lt;p&gt;Bu ekran da postman de test yazarken kullanmış olduğunuz &lt;code&gt;console.log(“xyz”)&lt;/code&gt; komutunun sonucunu görebilirsiniz.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android ActiveAndroid Kullanımı</title>
      <link>http://yazilim.aykutasil.com/2017/01/android-activeandroid-kullan%C4%B1m%C4%B1/</link>
      <pubDate>Wed, 11 Jan 2017 01:00:19 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/android-activeandroid-kullan%C4%B1m%C4%B1/</guid>
      <description>&lt;p&gt;Anroid ile ORM (Object Relational Mapping) kullanarak veritabanı işlemlerinizi oldukça kolay yapabilirsiniz.&lt;/p&gt;

&lt;p&gt;ActiveAndroid kütüphanesi ORM kütüphanelerinden biridir.&lt;/p&gt;

&lt;p&gt;Kütüphaneyi &lt;a href=&#34;https://github.com/pardom/ActiveAndroid&#34;&gt;buradan&lt;/a&gt; indirebilirsiniz.&lt;/p&gt;

&lt;p&gt;Kullanımı oldukça basittir. Sadece birkaç noktaya özellikle dikkat edilmesi gerekiyor. Bunlardan biri oluşturmuş olduğunuz tabloya yeni alanlar eklediğiniz de tablonuzu güncellemek. Veya herhangi bir sebeple tabloda çeşitli işlemler yapmak.&lt;/p&gt;

&lt;p&gt;Aşağıda kısaca Tablo oluşturmaktan ve gerektiğinde Tablo yu nasıl güncelleyeceğimizden bahsedicem.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Table(name = &amp;quot;Items&amp;quot;)
public class ModelSampleItem extends Model {

    @Column(name = &amp;quot;Name&amp;quot;)
    public String name;

    @Column(name = &amp;quot;Surname&amp;quot;)
    public String surname;

    @Column(name = &amp;quot;Phone&amp;quot;)
    public String phoneNumber;

    @Column(name = &amp;quot;Xyz&amp;quot;)
    public String xyz;

    @Column(name = &amp;quot;EMail&amp;quot;)
    public String email;

    @Column(name = &amp;quot;TryColumn&amp;quot;)
    public String tryColumn;


    @Column(name = &amp;quot;Column3&amp;quot;)
    public String column3;

    

    public ModelSampleItem() {
        super();

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda ki yapıyı kullanarak istediğiniz Tablo yu oluşturmanız mümkün.&lt;/p&gt;

&lt;p&gt;Tabi bundan önce yapmamız gereken birkaç ayar var.&lt;/p&gt;

&lt;p&gt;Android uygulamamızın Manifest dosyasına custom Application Name tanımlıyoruz ve bu isimde bir Class oluşturuyoruz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;application
    android:name=&amp;quot;.app.AppController&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ve Application dan türeyen sınıfımız&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class AppController extends com.activeandroid.app.Application {


    @Override
    public void onCreate() {
        super.onCreate();

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;com.activeandroid.app.Application&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Yukarıda ki sınıftan türetmek  aslında &lt;strong&gt;onCreate()&lt;/strong&gt; içerisinde &lt;strong&gt;ActiveAndroid.initializ(this)&lt;/strong&gt; ile aynı anlama gelmektedir.Ama yukarıda ki gibi yaparsak daha güzel bir görünüm olacaktır.&lt;/p&gt;

&lt;p&gt;Ve aşağıdaki meta-taglarını &lt;code&gt;&amp;lt;application&amp;gt;&lt;/code&gt; tagları arasıne ekliyoruz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;meta-data
    android:name=&amp;quot;AA_DB_NAME&amp;quot;
    android:value=&amp;quot;newiztop1.db&amp;quot; /&amp;gt;
&amp;lt;meta-data
    android:name=&amp;quot;AA_DB_VERSION&amp;quot;
    android:value=&amp;quot;1&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yapılandırma ayarlarımız bu kadar. Artık &lt;strong&gt;Items&lt;/strong&gt; benzeri tablolarınızı yukarıda ki gibi yazmanız ve uygulamanızı çalıştırmanız yeterli olacaktır.&lt;/p&gt;

&lt;p&gt;Yukarıda ki tabloya sonradan bir alan eklememiz gerekti. Uygulamamız büyüdükçe nelere ihtiyacı olacağını kestirmek imkansıza yakındır.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Column(name = &amp;quot;Column4&amp;quot;)
    public String column4;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alanımızı Items sınıfımıza ekliyoruz. Ama çalıştırdığımız da uygulamamız hata verecektir.&lt;/p&gt;

&lt;p&gt;Uygulamamıza yeni alan eklediğimizi bildirmek için biraz kıvranmamız gerekmekte.&lt;/p&gt;

&lt;p&gt;Öncelikle &lt;strong&gt;assets&lt;/strong&gt; klasörünün içine migrations isilmli bir klasör oluşturuyoruz. Bu ismi vermek zorunludur. assets/migrations&lt;/p&gt;

&lt;p&gt;Ve oluşturduğumuz migrations klasörüne &lt;strong&gt;2.sql&lt;/strong&gt; isimli bir dosya oluşturuyoruz.Niye 2 peki?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;meta-data
    android:name=&amp;quot;AA_DB_NAME&amp;quot;
    android:value=&amp;quot;newiztop1.db&amp;quot; /&amp;gt;

&amp;lt;meta-data
    android:name=&amp;quot;AA_DB_VERSION&amp;quot;
    android:value=&amp;quot;1&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Android Manifest dosyasına yapılandırırken &lt;strong&gt;DB_VERSION&lt;/strong&gt; olarak 1 verdik. Bura da belirttiğimiz sayının bir fazlası olması gerekiyor *.sql dosyamızın ismi.&lt;/p&gt;

&lt;p&gt;Ve &lt;strong&gt;2.sql&lt;/strong&gt; dosyamızın içine&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;BEGIN TRANSACTION;
ALTER TABLE Items ADD COLUMN Column4 TEXT;
COMMIT;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ekliyoruz.&lt;/p&gt;

&lt;p&gt;Ve çalıştırdığımız da &lt;strong&gt;Items&lt;/strong&gt; tablomuza &lt;strong&gt;Column4&lt;/strong&gt; isimli bir alan eklenmiş olacaktır.Artık bu alanımızı da gönül rahatlığıyla kullanabiliriz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Items Tablomuza herhangi bir satır eklemek istersek :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ModelSampleItem msi = new ModelSampleItem();
msi.name = &amp;quot;Aykut&amp;quot;;
msi.surname = &amp;quot;Asil&amp;quot;;
msi.phoneNumber = &amp;quot;535&amp;quot;;
msi.email = &amp;quot;huuuu@gmail.com&amp;quot;;
msi.xyz = &amp;quot;xy&amp;lt;&amp;quot;;
msi.Column4 = &amp;quot;merhaba&amp;quot;;
msi.save();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dememiz yeterli olacaktır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kaydedilmiş bir veriyi okumak istersek :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ModelSampleItem myModel = Model.load(ModelSampleItem.class, 6); // id si 6 olan veriyi getirir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;veya&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;ModelSampleItem&amp;gt; listMOdel = new Select().from(ModelSampleItem.class).execute(); // Tüm verileri List şeklinde getirir.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;İhityacınıza yönelik sorgulamalar yapabilirsiniz. Tek yapmanız gereken biraz kurcalamak.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Robolectric ile UnitTest Yazımı</title>
      <link>http://yazilim.aykutasil.com/2017/01/robolectric-ile-unittest-yaz%C4%B1m%C4%B1/</link>
      <pubDate>Wed, 11 Jan 2017 00:31:52 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/robolectric-ile-unittest-yaz%C4%B1m%C4%B1/</guid>
      <description>&lt;p&gt;Unit Test birçok yazıılımcı tarafından es geçillen ama bir o kadar da önemli ve yapılması gerekli olan bir durumdur.&lt;/p&gt;

&lt;p&gt;Proje büyüdükçe ve ilerledikçe teste duyulan ihtiyaç ta doğru orantılı olarak artmaktadır.&lt;/p&gt;

&lt;p&gt;Unit Test neden yapılır sorusunun daha ayrıntılı cevabı için unit test nedir nicin ve nasil yapilir bu yazıyı okuyabilirsiniz.&lt;/p&gt;

&lt;p&gt;Android Studio da Robolectric kullanarak Unit Test Yazımı&lt;/p&gt;

&lt;p&gt;Aşağıdaki adımları sırası ile ve düzgün bir şekilde uygularsanız herhangi bir sorun çıkmadan testi çalıştırabileceksiniz.(Ben gerektiğinden uzun bi zaman harcadım, siz harcamayın !)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;build.gradle&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;apply plugin: &#39;com.android.application&#39;

android {
    compileSdkVersion 22
    buildToolsVersion &amp;quot;23.0.0&amp;quot;

    defaultConfig {
        applicationId &amp;quot;com.a.aykut.tryrobolectric1&amp;quot;
        minSdkVersion 16
        targetSdkVersion 21
        versionCode 1
        versionName &amp;quot;1.0&amp;quot;
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;
        }
    }
}

dependencies {
    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])
    compile &#39;com.android.support:appcompat-v7:22.2.1&#39;
    compile &#39;com.jakewharton:butterknife:7.0.1&#39;

    testCompile &#39;junit:junit:4.12&#39;
    testCompile &#39;com.squareup.assertj:assertj-android:1.1.0&#39;
    testCompile &#39;org.robolectric:robolectric:3.0&#39;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;MainActivity&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Bind(R.id.button)
Button button;

@Bind(R.id.textView)
TextView textView;

@Override
protected void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  ButterKnife.bind(this);
}

@OnClick(R.id.button)
public void buttonClick(View vi) {
  textView.setText(&amp;quot;tiklandi&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;AndroidManifest.xml  dosyasında herhangi bir değişiklik yapmanıza gerek yok.&lt;/p&gt;

&lt;p&gt;Test sınıfımızı yazmaya başlayalım.&lt;/p&gt;

&lt;p&gt;İlk olarak Android Studio nun sol tarafında yer alan &lt;strong&gt;Build Variant&lt;/strong&gt; tabından &lt;strong&gt;Test Artifact&lt;/strong&gt; kısmını &lt;strong&gt;Unit Tests&lt;/strong&gt; olarak değiştirin.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/rEPljpe&#34;&gt;&lt;img src=&#34;http://i.imgur.com/rEPljpe.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unit Test yazmak için &lt;strong&gt;src&lt;/strong&gt; klasörüne test isminde bir klasör ve test klasörünün içine de &lt;strong&gt;java&lt;/strong&gt; isimli bir klasör oluşturmanız gerekmektedir.&lt;/p&gt;

&lt;p&gt;yani &lt;strong&gt;src/test&lt;/strong&gt; ve &lt;strong&gt;src/test/java&lt;/strong&gt; klasörlerini oluşturmalısınız.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/gztY5gr&#34;&gt;&lt;img src=&#34;http://i.imgur.com/gztY5gr.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oluşturmuş olduğunuz java klasörüne sağ tıklayarak new &amp;gt; Package diyin ve normal Package isminizle aynı isimde bir Package oluşturun.Burda biz com.a.aykut.tryrobolectric1 ismini kullandık.&lt;/p&gt;

&lt;p&gt;Oluşturmuş olduğunuz Package sağ tıklayarak new &amp;gt; Java Class diyin ve test sınıfını oluşturun. Anlaşılabilirlik açısından Test*(Test Edilecek Sınıf ismi) olarak isimlendirebilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TestMainActivity&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import android.app.Activity;

import android.widget.Button;
import android.widget.TextView;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.robolectric.Robolectric;
import org.robolectric.RobolectricGradleTestRunner;
import org.robolectric.annotation.Config;

import static junit.framework.Assert.assertEquals;
import static junit.framework.Assert.assertTrue;

@RunWith(RobolectricGradleTestRunner.class)
@Config(constants = BuildConfig.class,sdk = 21)
public class TestMainActivity {

  Activity activity;
  TextView textView;
  Button button;

  @Before
  public void setUp() {
    activity = Robolectric.setupActivity(MainActivity.class);
    textView = (TextView) activity.findViewById(R.id.textView);
    button = (Button) activity.findViewById(R.id.button);
  }

  @Test
  public void shouldMainActivityNotBeNull() throws Exception {
    Robolectric.buildActivity(MainActivity.class).create().pause().resume().get();
    assertTrue(Robolectric.buildActivity(MainActivity.class).create().get() != null);
    String hello = new MainActivity().getResources().getString(R.string.hello_world);
    assertEquals(hello, &amp;quot;Hello world!&amp;quot;);


  }

  @Test
  public void buttonClickChangeTextView() throws Exception {
    String text = textView.getText().toString();
    assertEquals(text, &amp;quot;Hello world!&amp;quot;);
    button.performClick();
    text = textView.getText().toString();
    assertEquals(text, &amp;quot;tiklandi&amp;quot;);

  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Evet.Test sınıfımızı da yazdık.Artık çalıştırabiliriz.&lt;/p&gt;

&lt;p&gt;Testimizi çalıştırmak için yazmış olduğumuz Test Sınıfına sağ tıklayarak Run diyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/7STeLHy&#34;&gt;&lt;img src=&#34;http://i.imgur.com/7STeLHy.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run dediğiniz de Test çalışacaktır. Fakat aşağıdaki hataya benzer bir hata alırsanız endişelenmeyin.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java.lang.RuntimeException: build\intermediates\bundles\debug\AndroidManifest.xml not found or not a file; it should point to your project&#39;s AndroidManifest.xml

at org.robolectric.manifest.AndroidManifest.validate(AndroidManifest.java:121)

at org.robolectric.manifest.AndroidManifest.getResourcePath(AndroidManifest.java:469)

at org.robolectric.manifest.AndroidManifest.getIncludedResourcePaths(AndroidManifest.java:475)

at org.robolectric.RobolectricTestRunner.createAppResourceLoader(RobolectricTestRunner.java:491)

at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)
.

.

.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/1TpiUpG&#34;&gt;&lt;img src=&#34;http://i.imgur.com/1TpiUpG.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Resim de görüldüğü gibi &lt;strong&gt;Edit Configurations&lt;/strong&gt; a tıklayın.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/pFGTznR&#34;&gt;&lt;img src=&#34;http://i.imgur.com/pFGTznR.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Resim deki gibi &lt;strong&gt;Working directory&lt;/strong&gt; yolunun sonuna &lt;strong&gt;\app&lt;/strong&gt; ekleyin.&lt;/p&gt;

&lt;p&gt;Ve şimdi tekrar Test Sınıfına sağ tıklayarak Run diyin.&lt;/p&gt;

&lt;p&gt;Ve sonuç aşağıdaki gibi olmalıdır.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/zIgjUDT&#34;&gt;&lt;img src=&#34;http://i.imgur.com/zIgjUDT.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kaynak kodlarını aşağıdkai linkten indirebilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/aykuttasil/RobolectricUnitTest&#34;&gt;https://github.com/aykuttasil/RobolectricUnitTest&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unit Test Nedir ? Niçin ve Nasıl Yapılır ?</title>
      <link>http://yazilim.aykutasil.com/2017/01/unit-test-nedir--ni%C3%A7in-ve-nas%C4%B1l-yap%C4%B1l%C4%B1r-/</link>
      <pubDate>Wed, 11 Jan 2017 00:27:54 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/unit-test-nedir--ni%C3%A7in-ve-nas%C4%B1l-yap%C4%B1l%C4%B1r-/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Unit Test Nedir ? Niçin ve Nasıl Yapılır ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yıl olmuş 2014 hala birim test makalesi mi yazıyorsun diye düşünüyor olabilirsiniz. Ancak, birim testi uzun zamandır kullanılan bir yöntem olmasına rağmen tam olarak ne işe yaradığı, neden yapıldığı ve nasıl yapılması gerektiği konusunda açıklayıcı bir Türkçe yazı bulmak malesef zor. Bu yüzden, yazılım mühendisi adaylarına ve kariyerine yeni başlayan arkadaşlara faydalı olabilmek adına bu yazıyı yazmak uygun olur diye düşündüm.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Birim Testi Nedir?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Birim testi adından anlaşıldığı üzere yazılım birimlerinin test edilmesidir. Burada yazılım birimi dediğimiz şey ise test edilebilen en küçük yazılım bileşenidir. Nesneye yönelik programlama yaklaşımını ele alacak olursak, yazılım birimleri sınıflardır diyebiliriz. Yapılan şey basit olarak sınıf davranışlarının (metodlar) belirli girdiler sağlandığı zaman doğru bir şekilde çalışıp, istediğimiz sonucu üretip üretmediğini kontrol etmektir. Bu şekilde yazılımın küçük birimleri test edildiği zaman, bütünü oluşturan parçaların en azından kendi içlerinde çalıştığından emin olmuş oluruz. Buraya kadar söylediklerimiz birim testinin genel tanımıdır, ama yazılım geliştiren kişiler olarak asıl anlamamız gereken şey birim testini niçin yaptığımızdır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Birim Test Niçin Yapılır?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bu soruyu eminim ki birçok yazılımcı kendi kendine sormuştur. Bir kısmımız tam olarak neye hizmet ettiğini anlamasak da, faydalı olduğunu düşündüğümüz için ve kendimizi daha güvende hissetmek adına birim test yazarız. Bazılarımız ise birim test yazmanın faydalı olduğunu bilmemize rağmen çeşitli bahaneler üreterek birim test yazmaktan kaçarız. Bunun arkasındaki asıl sebep ise birim testlerin ve test odaklı yazılım geliştirme tekniğinin (test-driven development) asıl amacını kavrayamamış olmamızdır. Her şeyden önce şunu söylemek gerekir: Birim testleri yazılımları test etmek için yazılmaz. İsmi “birim test” olan bir yöntem için “asıl amacı yazılımları test etmek değildir” demek ilk başta çok mantıklı gelmeyebilir ama yazıyı okudukça bana hak vereceğinizi düşünüyorum.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Birim testler hata bulmak için değildir&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bir yazılım sistemindeki hataları (bug) bulmak birim testler ile mümkün değildir. Çünkü birim testlerin yaptığı iş yazılımın en küçük parçalarını kendi içerisinde test etmektir. Peki bu küçük parçaların kendi içlerinde çalışıyor olması, yazılımın gerçek kullanıcılar tarafından kullanılmaya başladığı zaman bir bütün olarak çalışacağını gösterir mi? Kesinlikle hayır. Bir yazılım sistemi, onu oluşturan parçaların toplamından çok daha fazlasıdır. Dolayısıyla bu bütünü test etmek için farklı yöntemler kullanmak gerekir. İşlevsel test (functional testing), bütünleştirme testi (integration testing) bunlara örnek verilebilir ancak konumuz birim test olduğu için bunlara değinmeyeceğim.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hataları bulamıyorsa birim testler ne işe yarıyor?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Birim test yazmanın sağladığı gerçek fayda, bizi kaliteli kod yazmaya teşvik etmesidir. Peki bu nasıl olur? Öncelikle şunu söylemek gerekir ki, birim test yazmanın birinci kuralı test etmekte olduğumuz sınıfı, bağımlı olduğu diğer bütün bileşenlerden izole etmektir. Örnek verecek olursak, test ettiğiniz sınıfın bir Google servisine bağlanarak veri çektiğini düşünün. Ancak birim test esnasında bu sınıfın Google servisine bağlanıp veri çekmesini istemeyiz. Çünkü birim testin amacı yazılımın Google servisleriyle çalışabildiğini kanıtlamak değildir. Birim test yazarken, bağlantılı olduğumuz diğer bütün parçaların sorunsuz biçimde çalıştığını varsayarak yazarız, çünkü odaklandığımız şey sınıfın kendisidir, bağımlı olduğu diğer bileşenler değil. Bu varsayımı yapabilmek için de, mocking dediğimiz tekniği kullanarak test esnasında gerçek Google servisine bağlanmak yerine bizim yarattığımız sahte bir servise (mock object) bağlanıp sınıfın ihtiyacı olan veriyi döndürürüz.  Bu şekilde test ettiğimiz sınıf dışarıda bir servise bağlanmadan ihtiyacı olan veriyi alır ve işletimini tamamlar.&lt;/p&gt;

&lt;p&gt;Şimdi test etmekte olduğumuz bu sınıfın dışarıdaki Google servisiyle sıkı sıkıya bağlı (tightly coupled) olduğunu düşünün. Sınıf Google servisiyle ilgili bütün bilgileri içinde barındırıyor ve bağlantıyı yaratıp kullanıyor, veri alışverişini yapıyor. Biz bu sınıfa gerçek Google servisine değil de bizim belirlediğimiz sahte servise (mock object) bağlanmasını nasıl söyleyeceğiz? Bu şekilde birbirine sıkıca bağlanmış yazılım bileşenlerini birbirlerinden bağımsız bir şekilde test etmek mümkün değildir. Ancak bu bileşenler gevşek bağlı (loosely coupled) olsaydı, biz sınıfımıza test esnasında sahte servisi, gerçek işletim esnasında ise Google servisini kullanmasını söyleyebilirdik. Bu şekilde yazılım bileşenlerini birbirlerine gevşek bir biçimde bağlamak Dependency Injection tekniğiyle mümkündür ve gevşek bağlı sistemler çok daha kolay bakım yapılabilen, test edilebilen ve eklemeler yapması çok daha kolay olan sistemlerdir.&lt;/p&gt;

&lt;p&gt;Test odaklı yazılım geliştirme yapıyorsak (test-driven development), birim testleri sınıfın kendisinden önce yazmamız gerektiği için bu tarz tasarım detaylarını henüz işin başındayken doğru bir şekilde belirlemiş oluruz. Doğru biçimde birim test yazmak, yazılım bileşenlerini birbirlerine sıkı sıkıya bağlamamızı engelleyerek daha tasarım aşamasındayken daha kaliteli bir yazılım çıkarmamıza yardımcı olur. Özet olarak şunu söylemekte fayda var, bütün bileşenleri birbirinden bağımsız olarak test edilebilen yazılımlar, bakımı nispeten daha kolay olan ve kaliteli yazılımlardır. İşe birim testleri yazarak başlamak da bunu başarmamıza yardımcı olur.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Birim test yazmak kodda iyileştirme yapmayı (refactoring) kolaylaştırır&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Birim test yazmanın bir diğer büyük faydası da kodda iyileştirme yaparken (refactoring) ortaya çıkar. Hiçbir kod mükemmel değildir ve iyileştirme her zaman bir ihtiyaçtır. Ancak birçok yazılımcı çalışan sistemi bozmaktan korktuğu için iyileştirme yapmaz. Ancak kapsamlı birim testleriniz varsa, değişiklik yaptığınız sınıfın hala çalışıp çalışmadığını anlamak için birim testlerinizi kullanabilirsiniz. Daha önce birim testlerin hataları bulmak için kullanılmadığını söylemiş olsak da iyileştirme esnasında üzerinde çalıştığımız sınıfı bozup bozmadığımızı anlamak mümkün olabilir. Dolayısıyla birim test yazmak sadece kodu yazarken kaliteli yazmaya teşvik etmekle kalmaz, aynı zamanda ileride kodu iyileştirmemize de yardımcı olur.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Doğru birim test nasıl yazılır?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Birim testin nasıl yazılması gerektiği de çok önemlidir. Doğru yazılmayan birim testler bize hiçbir şey kazandırmayacağı gibi en ufak değişiklikte hatalar vermeye başlayıp başımızı ağrıtırlar. Üstüne bir de testlere bakım yapmakla uğraşmak zorunda kalacağımız için de fayda sağlamanın aksine zararlı olabilirler. O yüzden birim test yazarken aşağıdaki noktalara dikkat etmekte fayda var:&lt;/p&gt;

&lt;p&gt;Tek bir şeye odaklanın: Her testin tek bir şeyi test ettiğinden emin olun. Çok gerekli değilse aynı test içerisine birden fazla assert ifadesi koymayın.
Bağımlılıkları (dependency) değil, tek bir sınıfı test edin: Yazıda daha önce de değindiğimiz gibi, bir sınıfı test ederken o sınıfı bağımlı olduğu diğer yazılım bileşenlerinden izole edin, aksi taktirde yazdığınız test birim test değildir.
Yazdığınız testler birbirini etkilemesin: Yazdığınız her test birbirinden bağımsız bir şekilde tek başına sorunsuz çalışabilmelidir. Eğer yazdığınız bir birim test başka bir birim testin üreteceği veriye bağımlıysa yanlış yapıyorsunuz demektir.
Testlerinizi doğru isimlendirin: Test sayısı arttıkça isimlendirmenin önemi de artar. Kafa karıştırıcı test isimleri kullanmak ileride problemlere yol açar. Açıklayıcı olması için test isimlerini uzun tutmanız gerekiyorsa öyle yapın, uzun isimler yanlış isimlerden daha faydalıdır.
Test koduna ikinci sınıf kod muamelesi yapmayın: Testler de yazılımın bir parçasıdır. Dolayısıyla normal program kodunu yazarken ne kadar özen gösteriyorsanız test kodlarına da aynı özeni gösterin, kod tekrarlarından kaçının, okunabilir test kodu yazın.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.seckintozlu.com/etiketler/unit-test&#34;&gt;Kaynak&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Azure Mobile Services ve Notification Hubs Kullanımı</title>
      <link>http://yazilim.aykutasil.com/2017/01/azure-mobile-services-ve-notification-hubs-kullan%C4%B1m%C4%B1/</link>
      <pubDate>Wed, 11 Jan 2017 00:21:36 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/azure-mobile-services-ve-notification-hubs-kullan%C4%B1m%C4%B1/</guid>
      <description>&lt;p&gt;Azure Mobile Services çok hızlı ve kolay bir şekilde uygulama geliştirmeniz için önceden veya uygulama yazımı sırasında yapılması gereken işlemleri minimize eden bir servistir.&lt;/p&gt;

&lt;p&gt;Kullanımı oldukça kolay olmakla beraber ilk bir kaç adımı gerçekleştirmek bazen can sıkıcı olabilmekte.&lt;/p&gt;

&lt;p&gt;Bunun için ufak bir örnekle bu ilk birkaç adımı beraber atıcaz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://azure.microsoft.com/tr-tr/&#34;&gt;https://azure.microsoft.com/tr-tr/&lt;/a&gt; adresinden portal a girdiniz.Ve mobile services tab ından new diyerek yeni bir mobile services oluşturdunuz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/AzIDXWf&#34;&gt;&lt;img src=&#34;http://i.imgur.com/AzIDXWf.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Oluşturduğunuz Mobile Service tıkladınız ve çıkan ekranda Push tabına girdiniz.Bu taba tıkladıktan sonra notification gönderebilieceğiniz platformları göreceksiniz.&lt;/p&gt;

&lt;p&gt;Biz bu örneğimizde Android Platformu için push gönderimini anlatıcaz ve bunun için GCM API kısmına &lt;a href=&#34;https://console.developers.google.com/&#34;&gt;https://console.developers.google.com/&lt;/a&gt; linkinden oluşturduğumuz yeni proje nin API KEY ini yazıyoruz.Bu API KEY i bulmak için yeni proje oluşturduğunuzda Credentials sekmesinden &amp;gt; Add Credentials &amp;gt; API Key ve Server Key tıklıyoruz ve buradaki API KEY i kullanıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOT :&lt;/strong&gt; &lt;strong&gt;APIS&lt;/strong&gt; sekmesinden &lt;strong&gt;Cloud Messaging for Android&lt;/strong&gt; API sini aktif etmeyi unutmayın.&lt;/p&gt;

&lt;p&gt;Azure tarafında yapmanız gerekenler bunlar.&lt;/p&gt;

&lt;p&gt;Client tarafında ki kodlar için ise her platforma özel kodlar bulunmaktadır.&lt;/p&gt;

&lt;p&gt;Android Client ı için örnek kodlara &lt;a href=&#34;https://github.com/aykuttasil/AzureMobileService&#34;&gt;https://github.com/aykuttasil/AzureMobileService&lt;/a&gt; linkinden erişebilirsiniz.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Azure tarafında bir çok farklı işlem gerçekleştirebilirsiniz.&lt;/p&gt;

&lt;p&gt;Örneğin herhangi bir client da (android , ios , http vs.) mobile service altyapısını kullanarak veritabanına veri eklediniz.Ve her veri girişi yapıldığda uygulamanın yüklü olduğu tüm cihazlara bildirim göndermek istiyorsunuz.&lt;/p&gt;

&lt;p&gt;Bu ve buna benzer işlemlerinizi Azure Server tarafında halledebilirsiniz.&lt;/p&gt;

&lt;p&gt;Aşağıdaki resimde her Item tablosuna veri eklendiğin de bildirim gönderen kod bloğunu görebilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/VSKzp0b&#34;&gt;&lt;img src=&#34;http://i.imgur.com/VSKzp0b.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ReCaptcha Kullanimi</title>
      <link>http://yazilim.aykutasil.com/2017/01/recaptcha-kullanimi/</link>
      <pubDate>Wed, 11 Jan 2017 00:14:08 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/recaptcha-kullanimi/</guid>
      <description>

&lt;h1 id=&#34;recaptcha&#34;&gt;ReCaptcha&lt;/h1&gt;

&lt;p&gt;Sitenize gelebilecek saldıralara karşı bir önlem olarak kullanılacak eklentilerden biridir ReCaptcha.&lt;/p&gt;

&lt;p&gt;Kolay bir şekilde entegre edilir ve kolay bir şekilde güvenlik sağlanır.&lt;/p&gt;

&lt;p&gt;Bunun için aşağıdaki adımları uygulamanız yeterli olacaktır.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.com/recaptcha/admin#list&#34;&gt;https://www.google.com/recaptcha/admin#list&lt;/a&gt; sitesine gidiniz.Ve gerekli yerleri doldurunuz.&lt;/li&gt;
&lt;li&gt;Label kısmına ReCaptcha i hangi sayfada kullanacaksınız,(örneğin giriş sayfası için) GirişCaptcha diyin.&lt;/li&gt;
&lt;li&gt;Domain kısmına sitenizin domain i ekleyin.Her biri bir satır olacak şekilde.Birden fazla domain girerek aynı kodu farklı domainlerde çalıştırabilirsiniz.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Owner kısmına ise Adınız yazın.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://imgur.com/sQRkz2S&#34;&gt;&lt;img src=&#34;http://i.imgur.com/sQRkz2S.jpg&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;div kısmını ReCaptcha nın nerede gözükmesini istiyorsanız oraya koyun.(form elementinin içersinde olmalıdır.)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;script kısmını site kodunuzun en altına, body tagınızın bi üstüne koyun.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Client tarafında yapacaklarınız bu kadar.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Server tarafına geçtiğimizde ise Client tarafındaki formdan gönderilen bilgileri alır gibi “g-recaptcha-response” parametresiyle değeri alıyoruz.Ve ReCaptcha api sinin kullanarak eşleşmenin sağlanığ sağlanmadığına bakıyoruz.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bunun için server kısmına&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-c#&#34;&gt;        private static bool ControlReCaptcha(string secretKey, string reCaptcha, string remoteIp)

        {

            var secretkey = secretKey;

            var recaptcha = reCaptcha;

            var remoteip = remoteIp;



            var recaptchacommand = &amp;quot;https://www.google.com/recaptcha/api/siteverify?secret=&amp;quot; + secretkey +

                                   &amp;quot;&amp;amp;response=&amp;quot; + recaptcha + &amp;quot;&amp;amp;remoteip=&amp;quot; + remoteip;

            var resp = WebRequest.Create(recaptchacommand).GetResponse();

            var str = resp.GetResponseStream();


            var sr = new StreamReader(str);

            var a = sr.ReadToEnd();


            JObject obj = JObject.Parse(a);

            var sonuc = obj[&amp;quot;success&amp;quot;].ToString().ToLower();


            return sonuc == &amp;quot;true&amp;quot;;

        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;fonksiyonunu ekliyoruz.Ve gerekli parametreleri girdiğimizde fonksiyon bize true – false olacak şekilde sonucu döndürüyor.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Key Hashes &amp; SHA1</title>
      <link>http://yazilim.aykutasil.com/2017/01/android-key-hashes--sha1/</link>
      <pubDate>Tue, 10 Jan 2017 23:56:35 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/android-key-hashes--sha1/</guid>
      <description>

&lt;h1 id=&#34;android-key-hashes-sha1&#34;&gt;Android Key Hashes &amp;amp; SHA1&lt;/h1&gt;

&lt;p&gt;Windows komut satırına aşağıdaki komutu yazarak ulaşabilirsiniz.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;keytool -exportcert -alias androiddebugkey -keystore %HOMEPATH%\.android\debug.keystore | openssl sha1 -binary | openssl base64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;openssl hatası alırsanız &lt;a href=&#34;https://code.google.com/p/openssl-for-windows/downloads/detail?name=openssl-0.9.8k_X64.zip&#34;&gt;https://code.google.com/p/openssl-for-windows/downloads/detail?name=openssl-0.9.8k_X64.zip&lt;/a&gt; adresindeki dosyayı indirdikten sonra çıkan dosyadaki bin klasörünü ortam değişkenlerindeki PATH kısmına eklerseniz sorun ortadan kalkacaktır.&lt;/p&gt;

&lt;p&gt;Ortam değişkenlerine ulaşmak için : &lt;strong&gt;Denetim Masası &amp;gt; Sistem &amp;gt; Gelişmiş Sİstem Ayarları&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SHA1 ulaşmak için komut satırına aşağıdaki kodu yazmanız yeterli olacaktır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;your_user_name&lt;/strong&gt; yerine kendi kullanıcı adınızı yazmayı unutmayın.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;keytool -list -v -keystore c:\users\your_user_name\.android\debug.keystore -alias androiddebugkey -storepass android -keypass android
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Local IIS Site Kurulumu</title>
      <link>http://yazilim.aykutasil.com/2017/01/local-iis-site-kurulumu/</link>
      <pubDate>Tue, 10 Jan 2017 23:20:12 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/local-iis-site-kurulumu/</guid>
      <description>

&lt;h1 id=&#34;local-iis-site-kurulumu&#34;&gt;Local IIS Site Kurulumu&lt;/h1&gt;

&lt;p&gt;Uygulamanızı geliştirme sırasında Local IIS e sitenizi tanımlamanız gerekebilir. Sanki uzak sunucuda sitenizi custom domain ile host eder gibi (yani site kodlarınızı uzaktaki hostunuzda çalıştırır gibi) çalıştırabilirsiniz. İstediğiniz domain adresini belirtebilir, işlemlerinizi bu domaini kullanarak gerçekleştirebilirsiniz. Eğer bu yazıyı okuyor iseniz muhtemelen bunu yapmaya gerek duymuşsunuzdur.&lt;/p&gt;

&lt;p&gt;İlk olarak windows yüklü bilgisayarımızın başlat menüsüne tıklayarak  &lt;strong&gt;“Windows özellikleriniz Aç veya Kapat”&lt;/strong&gt; yazıp arama yapıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/d5obWDA&#34;&gt;&lt;img src=&#34;http://i.imgur.com/d5obWDA.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yukarıda ki resimde görmüş olduğunuz gibi gerekli kutucukları işaretleyip kurulumu sağıyoruz.&lt;/p&gt;

&lt;h4 id=&#34;visual-studio-net-uygulamamızı-iis-e-tanıtma&#34;&gt;Visual Studio .Net Uygulamamızı IIS e Tanıtma&lt;/h4&gt;

&lt;p&gt;Visual Studio da uygulamızın ayarlar kısmına girerek yukarıdaki gibi yapılandırıyoruz.&lt;/p&gt;

&lt;p&gt;Servers ın alt kısmında görmüş olduğunuz Local IIS i seçmeyi unutmayalım. Bu seçenek Local imize IIS kurduktan sonra geldi.&lt;/p&gt;

&lt;p&gt;Şimdi sıra IIS yapılandırmasında.&lt;/p&gt;

&lt;p&gt;Bunun için yine başlat tuşuna basarak iis yazalım ve Internet Information Services (IIS) Yöneticisi ne girelim.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/e2lPp4E&#34;&gt;&lt;img src=&#34;http://i.imgur.com/e2lPp4E.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Siteler e sağ tıklayarak Web Sitesi Ekle diyelim.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/UuDqEXb&#34;&gt;&lt;img src=&#34;http://i.imgur.com/UuDqEXb.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aşağıdaki gibi gerekli yerleri dolduralım.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Site adı :&lt;/strong&gt; Herhangi bir isim girebiliriz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fiziksel Yol :&lt;/strong&gt;  uygulamamızın kodlarının bulunduğu klasörü göstermeliyiz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not&lt;/strong&gt; : Web.Config dosyasının bulunduğu klasörün adresi gösterilmelidir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ana bilgisayar adı :&lt;/strong&gt; Visual Studio da girdiğimiz adresin aynısını girmeliyiz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/SQwIO0c&#34;&gt;&lt;img src=&#34;http://i.imgur.com/SQwIO0c.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;host-dosyası-yapılandırması&#34;&gt;Host dosyası yapılandırması&lt;/h4&gt;

&lt;p&gt;IIS e kaydetmiş olduğumuz domain adresini Windows a söylemeliyiz.&lt;/p&gt;

&lt;p&gt;Bunun için &lt;strong&gt;Windows/System32/drivers/etc&lt;/strong&gt; klasörünün içinde bulunan Host dosyasını  açarak adresimizi eklemeliyiz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Not :&lt;/strong&gt; Host dosyasını masaüstünüze kopyalayın. Gerekli düzenlemeleri yaptıktan sonra dosyayı kopyalayıp tekrar etc klasörünün içine yapıştırın.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/ABzsBY9&#34;&gt;&lt;img src=&#34;http://i.imgur.com/ABzsBY9.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aşağıdaki resimdeki gibi adresimizi ekleyip kaydediyoruz.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imgur.com/BGUmzda&#34;&gt;&lt;img src=&#34;http://i.imgur.com/BGUmzda.png&#34; title=&#34;source: imgur.com&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Artık Visual Studio muzda uygulamızı derleyebilir ve belirlediğimiz domainden erişim sağlayabiliriz.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TSQL NULLIF Fonksiyonu Nedir ve Nasil Kullanilir</title>
      <link>http://yazilim.aykutasil.com/2017/01/tsql-nullif-fonksiyonu-nedir-ve-nasil-kullanilir/</link>
      <pubDate>Tue, 10 Jan 2017 23:08:34 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/tsql-nullif-fonksiyonu-nedir-ve-nasil-kullanilir/</guid>
      <description>

&lt;h2 id=&#34;tsql-nullif-fonksiyonu&#34;&gt;TSQL NULLIF fonksiyonu&lt;/h2&gt;

&lt;p&gt;NULLIF fonksiyonu verilen iki parametre birbirine esit ise NULL deger döndürür eger degerleri fakli iki parametre verilirse sonuç olarak birinci parametrenin degerini döndürür.&lt;/p&gt;

&lt;p&gt;Kullanimi ve anlamasi kolay bir fonksiyon oldugu için basit bir örnekle anlatmaya çalisalim.&lt;/p&gt;

&lt;p&gt;Ilk olarak kullanacagimiz geçici tabloyu asagidaki gibi çalistirip içine insert komutu ile veri kaydedelim.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE #Urun (
UrunID TINYINT,
ListeFiyati DECIMAL NULL); 

GO

INSERT #Urun VALUES(1,100);
INSERT #Urun VALUES(2,NULL);
INSERT #Urun VALUES(3,0);
INSERT #Urun VALUES(7,250);
INSERT #Urun VALUES(9,458);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ListeFiyati kolonuna göre count yaparsak sonuç olarak 4 dönecegini görürsünüz, çünkü UrunID’si 2 olan ürünün liste fiyati girilmemistir. Count fonksiyonu null degerleri saymayacagi için 5 degil 4 degerini döndürür. Count(*) veya count(UrunID) yazarsaniz ID kolonu hiç null olmadigi için 5 degerini görürsünüz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select count(*) from #Urun
--sonuç : 5

select count(UrunID) from #Urun
--sonuç : 5

select count(ListeFiyati) from #Urun
--sonuç 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simdi gelelim NULLIF fonksiyonuna. Liste fiyati 0 olarak girilen ürünlerin sayiya dahil etmek istemiyorsak, Liste fiyati 0 olanlari NULL ‘a çevirerek count islemini yapabiliriz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;select NULLIF(ListeFiyati,0) from #Urun
/*
Liste Fiyati 0 olanlari NULL yap.
Sonuç:
100
NULL
NULL
250
458
*/

--Liste Fiyati 0 olanlar hariç sayiyi bulmak istiyorsak. (count fonksiyonunun NULL degerleri saymadigini unutmayalim)
select count(NULLIF(ListeFiyati,0)) from #Urun
--sonuç : 3.
--Çünkü bir ürüne ait liste fiyati 0 di. Onu NULL’ a degistirdik ve ----sayisini getirdik.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://www.yazilimmutfagi.com/10170/veritabani/sql-server/tsql-nullif-fonksiyonu-nedir-ve-nasil-kullanilir.aspx&#34;&gt;Kaynak&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Spinner Text Güncelleme</title>
      <link>http://yazilim.aykutasil.com/2017/01/android-spinner-text-g%C3%BCncelleme/</link>
      <pubDate>Tue, 10 Jan 2017 23:00:03 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/android-spinner-text-g%C3%BCncelleme/</guid>
      <description>

&lt;h2 id=&#34;dinamik-olarak-spinner-text-güncelleme&#34;&gt;Dinamik Olarak Spinner Text Güncelleme&lt;/h2&gt;

&lt;p&gt;Android de Spinner yapısı açılır menü (dropdown) olarak kullanlan kullanışlı bir componenttir.&lt;/p&gt;

&lt;p&gt;Farklı ihtiyaçlarınız doğrultusunda Spinner ınızın elemanlarının değerini değiştirmek isteyebilirsiniz.&lt;/p&gt;

&lt;p&gt;Örneğin bir ListView iniz var.Ve içerisinde aynı kategoriden ama değişik durumlara sahip itemlar var ve siz bu itemları durumuna göre gruplandırıp sayısını Spinner da göstermek istiyorsunuz. Bunun için aşağıda belirtecek olduğum yapıyı kullanabilirsiniz.&lt;/p&gt;

&lt;p&gt;Öncellikle String.xml dosyasına Spinner ımızda göstereceğimiz elemanları tanımlıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;String.xml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;string name=&amp;quot;pazartesi&amp;quot;&amp;gt;Pazartesi&amp;lt;/string&amp;gt;
&amp;lt;string name=&amp;quot;sali&amp;quot;&amp;gt;Salı&amp;lt;/string&amp;gt;
&amp;lt;string name=&amp;quot;carsamba&amp;quot;&amp;gt;Çarşamba&amp;lt;/string&amp;gt;
&amp;lt;string name=&amp;quot;persembe&amp;quot;&amp;gt;Perşembe&amp;lt;/string&amp;gt;
&amp;lt;string name=&amp;quot;cuma&amp;quot;&amp;gt;Cuma&amp;lt;/string&amp;gt;
&amp;lt;string name=&amp;quot;cumartesi&amp;quot;&amp;gt;Cumartesi&amp;lt;/string&amp;gt;
&amp;lt;string name=&amp;quot;pazar&amp;quot;&amp;gt;Pazar&amp;lt;/string&amp;gt;


&amp;lt;string-array name=&amp;quot;array_gonderi_list_haftalik&amp;quot;&amp;gt;
    &amp;lt;item&amp;gt;@string/pazartesi&amp;lt;/item&amp;gt;
    &amp;lt;item&amp;gt;@string/sali&amp;lt;/item&amp;gt;
    &amp;lt;item&amp;gt;@string/carsamba&amp;lt;/item&amp;gt;
    &amp;lt;item&amp;gt;@string/persembe&amp;lt;/item&amp;gt;
    &amp;lt;item&amp;gt;@string/cuma&amp;lt;/item&amp;gt;
    &amp;lt;item&amp;gt;@string/cumartesi&amp;lt;/item&amp;gt;
    &amp;lt;item&amp;gt;@string/pazar&amp;lt;/item&amp;gt;
&amp;lt;/string-array&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;SpinnerHelper.java&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static String[] getChangedSpinnerItemText(Context context) {
    String[] originalList = context.getResources().getStringArray(R.array.array_gonderi_list_haftalik);

    Resources resources = context.getResources();
    for (int a = 0; a &amp;lt; originalList.length; a++) {
        int count = 0;
        if (originalList[a].equals(resources.getString(R.string.pazartesi))) {
            count = 2;
            originalList[a] += &amp;quot; ( &amp;quot; + count + &amp;quot; )&amp;quot;;
        } else if (originalList[a].equals(resources.getString(R.string.sali))) {
            count = 4;
            originalList[a] += &amp;quot; ( &amp;quot; + count + &amp;quot; )&amp;quot;;
        } else if (originalList[a].equals(resources.getString(R.string.carsamba))) {
            count = 7;
            originalList[a] += &amp;quot; ( &amp;quot; + count + &amp;quot; )&amp;quot;;
        } else {
            count = 8
            originalList[a] += &amp;quot; ( &amp;quot; + count + &amp;quot; )&amp;quot;;
        }
    }
    return originalList;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Daha sonra spinnerımızı tanımladığımız yere giderek spinnerımızı yapılandırıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FragmentX.java&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void setSpinnerNavToolbar() {

 // Guncelledikten sonra spinner görünümü örneği
 // Pazartesi ( 2 )
 // Salı ( 4 )
 // ... 
 
 // Spinner itemlarının güncellenmiş halini barındıran listeyi getiriyoruz.
 String[] changedList = getChangedSpinnerItemText(context);

 // Spinner adapterımıza eklemeler yapılmış String Arrayi veriyoruz.
 ArrayAdapter&amp;lt;CharSequence&amp;gt; adapter = new ArrayAdapter&amp;lt;CharSequence&amp;gt;(mContext, R.layout.spinner_nav_item_layout,changedList);
 Spinner spinner = (Spinner) findViewById(R.id.spinner_nav);
 spiner.setAdapter(adapter);
 spinner.setVisibility(NavigationView.VISIBLE);
 spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
 @Override
 public void onItemSelected(AdapterView&amp;lt;?&amp;gt; parent, View view, int position, long id) {

 // Original Liste elemanlarımızı getiriyoruz 
 String[] originalList = context.getResources().getStringArray(R.array.array_gonderi_list_haftalik);
 
 // Original Liste elemanını baz alarak işlem yapmak 
 // Bu sayede Pazartesi , Salı gibi değerleri alıyoruz. Değiştirilmiş (güncellenmiş) değerleri sadece görünüm için kullanıyoruz.
 String secilendeger = originalList[position];


 // Pazartesi seçildiğinde yapmak istediğimiz işlemleri burada belirtebiliriz.
 if (secilendeger.equals(getResources().getString(R.string.pazartesi))) {

 } 
 // Salı seçildiğinde yapmak istediğimiz işlemleri burada belirtebiliriz.
 else if(secilendeger.equals(getResources().getString(R.string.pazartesi)))
 {

 }
 }

 @DebugLog
 @Override
 public void onNothingSelected(AdapterView&amp;lt;?&amp;gt; parent) {

 }
 });
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Runnable() &amp; Callable()</title>
      <link>http://yazilim.aykutasil.com/2017/01/runnable--callable/</link>
      <pubDate>Tue, 10 Jan 2017 22:44:52 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/runnable--callable/</guid>
      <description>

&lt;h1 id=&#34;runnable-callable&#34;&gt;Runnable() &amp;amp; Callable()&lt;/h1&gt;

&lt;p&gt;Ayrıntılı açıklama için &lt;a href=&#34;http://www.java67.com/2013/01/difference-between-callable-and-runnable-java.html&#34;&gt;bu siteyi&lt;/a&gt; kullanabilirsiniz.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software</title>
    <link>http://yazilim.aykutasil.com/tags/java/index.xml</link>
    <description>Recent content on Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr-tr</language>
    <atom:link href="http://yazilim.aykutasil.com/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Android GcmNetworkManager Kullanımı</title>
      <link>http://yazilim.aykutasil.com/2017/01/android-gcmnetworkmanager-kullan%C4%B1m%C4%B1/</link>
      <pubDate>Wed, 11 Jan 2017 01:43:53 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/android-gcmnetworkmanager-kullan%C4%B1m%C4%B1/</guid>
      <description>&lt;p&gt;GcmNetworkManager kullanarak Android de network tabanlı işlemlerinizi olabildiğince kontrollü bir şekide yapabilirsiniz.&lt;/p&gt;

&lt;p&gt;GcmNetworkManager ın kullanım alanı daha çok asenkron ve periodic network işlemlerinizi yapılandırmaktır.&lt;/p&gt;

&lt;p&gt;Tek sefer çalışacak veya Periodic olarak çalışacak işlemleriniz için 2 tip belirlenmiştir.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OneoffTask&lt;/li&gt;
&lt;li&gt;PeriodicTask&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;OneoffTask Kullanımı&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;OneoffTask oneoff = new OneoffTask.Builder()
        // Uygulamanızı kapatsanız bile tekrar açtığınız da network işleminiz işleme konulur.
        // Yani isteğinizin kalıcı olup olmamasını bu parametre ile ayarlayabilirsiniz.
        .setPersisted(true)
        // Belirtilen network işlemlerinin çalışacağı service i belirtir.
        .setService(MyGcmTaskService.class)
        // İşleminiz için tag belirleyebilirsiniz.
        // Aynı tag ile yeni bir istek yaptığınız da &#39;.setUpdateCurrent(true)&#39; olarak belirlenmiş ise isteğinizi yeni istek ile günceller. Yani eski isteğiniz geçersiz olacaktır. &#39;setUpdateCurrent(false)&#39; olarak belirlenir ise aynı tag ile yeni istekte bulunsanız bile her iki isteğiniz de çalışacaktır. 
        .setTag(tag)
        // Network isteğinizin çalışma zamanı parametrelerini belirler
        .setExecutionWindow(0, 10)
        // İşleminiz için internet gerekliliği veya wireless gerekliliği parametrelerini belirler
        .setRequiredNetwork(required_network_state)
        // İşleminiz için cihazın şarja bağlı olup olmaması gerekliliğini belirler
        .setRequiresCharging(false)
        // Aynı tag ile yeni istek yapıldığı takdirde güncellenip güncellenmemesi durumunu belirler
        .setUpdateCurrent(true)
        // Bundle ile işleminiz için gerekli parametreleri belirleyebilirsiniz
        .setExtras(bundle)
        // build eder
        .build();

GcmNetworkManager.getInstance(context).schedule(oneoff);
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;MyGcmTaskService&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Cihazınızı yeniden başlatma gibi durumlar da önceden belirlenmiş task lerinizin çalışmasını devam ettirmesini istiyorsanız
// burada tekrar belirlemelisiniz.
@Override
public void onInitializeTasks() {
    
}

// GcmNetworkManager ın kendi algoritması ile seçilen, tanımlamış olduğunuz istek bu kod bloğuna girecek.
@Override
public int onRunTask(TaskParams taskParams) {
    try {
        Bundle bundle = taskParams.getExtras();
        return SchedulerRandevuTask(bundle);        
    } catch (Exception e) {
        ErrorEvent errorEvent = new ErrorEvent();
        errorEvent.setErrorContent(e.getMessage());
        EventBus.getDefault().post(errorEvent);
        return GcmNetworkManager.RESULT_RESCHEDULE;
    }
}

private int SchedulerZiyaretTask(Bundle bundle) {
    try {
        // isteğimiz sırasında bundle olarak yüklemiş olduğumuz nesneyi burada yakalıyoruz
        String jsonModel = bundle.getString(Const.IZTOP_TASK_BUNDLE);
        ZiyaretRequest request = new Gson().fromJson(jsonModel, ZiyaretRequest.class);
        ZiyaretResponse ziyaretResponse = sendZiyaretProcess(request);
        switch (ziyaretResponse.getCode()) {
            case 0: {
                EventBus.getDefault().post(ziyaretResponse);                
                // işlemlerimiz başarılı bir şekilde gerçekleşmiş ise result değeri olarak RESULT_SUCCESS dönüyoruz.
                // GcmNetworkManager bu işlemi başarılı olduğu için listeden silecek ve tekrar çalıştırmayı denemicektir.
                return GcmNetworkManager.RESULT_SUCCESS;
            }
            default: {
                // işlemlerimiz başarısız olması durumunda ( burada sunucuya istekte bulunulmuş ve dönen değer 0 değil ise başarısız olarak belirlenmiştir )isteğin tekrar çalışması için result değeri olarak RESULT_RESCHEDULE dönüyoruz.
                return GcmNetworkManager.RESULT_RESCHEDULE;
            }
        }
    } catch (Exception e) {
        SuperHelper.CrashlyticsLog(e);
        e.printStackTrace();
        return GcmNetworkManager.RESULT_RESCHEDULE;
    }


}
private ZiyaretResponse sendZiyaretProcess(ZiyaretRequest request) {
    return ApiManager.getInstance(getApplicationContext()).Ziyaret(request);
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;ApiManager / Ziyaret&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public ZiyaretResponse Ziyaret(ZiyaretRequest request) {
    try {
        RestClient restClient = RestClient.getInstance();
        Call&amp;lt;ZiyaretResponse&amp;gt; responseCall = restClient.getApiService().Ziyaret(request);
        ZiyaretResponse ziyaretResponse = responseCall.execute().body();
        return ziyaretResponse;
    } catch (Exception ex) {
        return null;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Retrofit ApiService&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@POST(&amp;quot;sunucu/ziyaret/api/adresi&amp;quot;)
Call&amp;lt;ZiyaretResponse&amp;gt; Ziyaret(@Body ZiyaretRequest ziyaretRequest);&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;
</description>
    </item>
    
    <item>
      <title>Android SMS Receiver</title>
      <link>http://yazilim.aykutasil.com/2017/01/android-sms-receiver/</link>
      <pubDate>Wed, 11 Jan 2017 01:42:54 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/android-sms-receiver/</guid>
      <description>

&lt;h1 id=&#34;android-sms-receiver&#34;&gt;Android SMS Receiver&lt;/h1&gt;

&lt;p&gt;Android de gelen sms leri dinlemek ve uygulamanızın akışını gelen sms lere göre şekillendirmek için aşağıdaki yapıyı kullanabilirsiniz.&lt;/p&gt;

&lt;p&gt;İlk olarak AndroidManifest.xml dosyanızda receiver tanımlamalısınız. Fakat biz bu receiver ı dinamik olarak tanımlıcaz. Bunu yapmamızın sebebi SMS i dinledikten sonra bu receiver ı silmek ve daha sonra gelen SMS lerin dinlenmesini önlemek.&lt;/p&gt;

&lt;p&gt;Siz uygulamınız da sürekli bir SMS dinlemeye ihtiyaç duyarsanız receiver ı AndroidManifest.xml dosyanızda tanımlamalısınız.&lt;/p&gt;

&lt;p&gt;Biz burda SMS dinlemesi yaparken önlem amaçlı olarak CPU nun uyumasını önlüyoruz. Eğer bir işlem sonucunda sms gelmesini bekliyorsak, beklediğimiz SMS  geciktiği takdirde ve bu sırada cihazın ekranını vs. kapattığımız da Android cihazımız kendini uyku moduna almak isteyecektir. Bunu önlemek için &lt;strong&gt;WakefulBroadcastReceiver&lt;/strong&gt; yapısını kullanıyoruz. Bu yapı aslında Android in WakeLock özelliğini kullanan serviceler için özel olarak tasarlanmış  bir yapıdır. Cihazı uyanık tutar ve işimiz bittiği takdirde bu WakeLock u kaldırmamız gerekir. Bunu da service in içerisinde tanımlarız.&lt;/p&gt;

&lt;p&gt;Aşağıdaki fonksiyonu Activity miz içerisinde ihtiyacımız olan yerde çağırır ve SMS receiver ı çalıştırmıış oluruz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LoginActivity&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void RegisterSmsReceiver() {
    SmsReceiver smsReceiver = new SmsReceiver();
    IntentFilter intentFilter = new IntentFilter(&amp;quot;android.provider.Telephony.SMS_RECEIVED&amp;quot;);
    android.os.Handler handler = new android.os.Handler();
    registerReceiver(smsReceiver, intentFilter, &amp;quot;android.permission.GET_TASKS&amp;quot;, handler);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;SmsReceiver&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class SmsReceiver extends WakefulBroadcastReceiver {

    private static final String TAG = &amp;quot;SmsReceiver&amp;quot;;

    public SmsReceiver() {
        super();
    }

    @Override
    public void onReceive(Context context, Intent intent) {
        Intent myIntent = intent;
        myIntent.setClass(context, SmsReceiverService.class);

        // startWakeFulService ile AndroidManifest.xml dosyamız içerisinde tanımlamış olduğumuz Service e yönlendiriyoruz.
        // Ve cihazın uyanık kalmasını sağlıyoruz.
        startWakefulService(context, myIntent);

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;AndroidManifest.xml&lt;/strong&gt; dosyasında  Service imizi  tanımlıyoruz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;service
    android:name=&amp;quot;.SmsReceiverService&amp;quot;
    android:exported=&amp;quot;false&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;exported=”false”&lt;/code&gt; tanımı servisin cihazda ki diğer uygulamalar tarafından çalıştırılamayacağını belirtir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SmsReceiverService&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class SmsReceiverService extends IntentService {

    private static final String TAG = &amp;quot;SmsReceiverService&amp;quot;;
    private Context context;

    public SmsReceiverService() {
        super(TAG);
    }

    @Override
    public void onCreate() {
        super.onCreate();
        context = getApplicationContext();
    }


    @Override
    protected void onHandleIntent(Intent intent) {

        String msg_from = null;
        String msgBody = null;
        if (intent.getAction().equals(&amp;quot;android.provider.Telephony.SMS_RECEIVED&amp;quot;)) {
            Bundle bundle = intent.getExtras();           //---get the SMS message passed in---
            SmsMessage[] msgs = null;

            if (bundle != null) {
                //---retrieve the SMS message received---
                try {
                    Object[] pdus = (Object[]) bundle.get(&amp;quot;pdus&amp;quot;);
                    msgs = new SmsMessage[pdus.length];
                    for (int i = 0; i &amp;lt; msgs.length; i++) {
                        msgs[i] = SmsMessage.createFromPdu((byte[]) pdus[i]);
                        msg_from = msgs[i].getOriginatingAddress();
                        msgBody = msgs[i].getMessageBody();

                    }
                } catch (Exception e) {
                     // Log.d(&amp;quot;Exception caught&amp;quot;,e.getMessage());
                }
            }
        }

        SmsEvent smsEvent = new SmsEvent();
        smsEvent.setActivationCode(&amp;quot;357&amp;quot;);
        smsEvent.setMsgBody(msgBody);
        smsEvent.setMsgFrom(msg_from);

        // EventBus ile sonucu istediğimiz yere gönderebiliriz.
        EventBus.getDefault().post(smsEvent);

        // Service in işini tamamladığını ve artık cihazın WakeLock u serbest bırakabileceğini söylüyoruz.
        SmsReceiver.completeWakefulIntent(intent);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;SmsEvent&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class SmsEvent {
    private String activationCode;
    private String msgFrom;
    private String msgBody;


    public String getActivationCode() {
        return activationCode;
    }

    public void setActivationCode(String activationCode) {
        this.activationCode = activationCode;
    }

    public String getMsgFrom() {
        return msgFrom;
    }

    public void setMsgFrom(String msgFrom) {
        this.msgFrom = msgFrom;
    }

    public String getMsgBody() {
        return msgBody;
    }

    public void setMsgBody(String msgBody) {
        this.msgBody = msgBody;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Android Internet Connection Receiver </title>
      <link>http://yazilim.aykutasil.com/2017/01/android-internet-connection-receiver/</link>
      <pubDate>Wed, 11 Jan 2017 01:42:36 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/android-internet-connection-receiver/</guid>
      <description>&lt;p&gt;Uygulamanızın akışını internet kontrolü yaparak yönetmeniz gerekebilir.&lt;/p&gt;

&lt;p&gt;Bunun için ilk olarak AndroidManifest.xml dosyasına receiver tanımı yapmalısınız.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;receiver android:name=&amp;quot;.InternetConnectionReceiver&amp;quot;&amp;gt;
    &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&amp;quot;android.net.conn.CONNECTIVITY_CHANGE&amp;quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/receiver&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;InternetConnectionReceiver&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class InternetConnectionReceiver extends BroadcastReceiver {


    @Override
    public void onReceive(Context context, Intent intent) {

        if (CheckConnection(context)) {

        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda tanımlanmış olan receiver, cihazın ağ yapısında herhangi bir değişiklik olduğunda bunu yakalar. Örneğin wireless açıkken kapattığınız da veya kapalıyken açtığınız da bunu yakayabilirsiniz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CheckConnection&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static boolean checkConnection(Context con) {
    ConnectivityManager cm = (ConnectivityManager) con.getSystemService(Context.CONNECTIVITY_SERVICE);
    NetworkInfo netInfo = cm.getActiveNetworkInfo();
    return netInfo != null &amp;amp;&amp;amp; netInfo.isConnectedOrConnecting();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda ki kod bloğu da cihazın internete bağlı olması durumunu kontrol eder.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android ActiveAndroid Kullanımı</title>
      <link>http://yazilim.aykutasil.com/2017/01/android-activeandroid-kullan%C4%B1m%C4%B1/</link>
      <pubDate>Wed, 11 Jan 2017 01:00:19 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/android-activeandroid-kullan%C4%B1m%C4%B1/</guid>
      <description>&lt;p&gt;Anroid ile ORM (Object Relational Mapping) kullanarak veritabanı işlemlerinizi oldukça kolay yapabilirsiniz.&lt;/p&gt;

&lt;p&gt;ActiveAndroid kütüphanesi ORM kütüphanelerinden biridir.&lt;/p&gt;

&lt;p&gt;Kütüphaneyi &lt;a href=&#34;https://github.com/pardom/ActiveAndroid&#34;&gt;buradan&lt;/a&gt; indirebilirsiniz.&lt;/p&gt;

&lt;p&gt;Kullanımı oldukça basittir. Sadece birkaç noktaya özellikle dikkat edilmesi gerekiyor. Bunlardan biri oluşturmuş olduğunuz tabloya yeni alanlar eklediğiniz de tablonuzu güncellemek. Veya herhangi bir sebeple tabloda çeşitli işlemler yapmak.&lt;/p&gt;

&lt;p&gt;Aşağıda kısaca Tablo oluşturmaktan ve gerektiğinde Tablo yu nasıl güncelleyeceğimizden bahsedicem.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Table(name = &amp;quot;Items&amp;quot;)
public class ModelSampleItem extends Model {

    @Column(name = &amp;quot;Name&amp;quot;)
    public String name;

    @Column(name = &amp;quot;Surname&amp;quot;)
    public String surname;

    @Column(name = &amp;quot;Phone&amp;quot;)
    public String phoneNumber;

    @Column(name = &amp;quot;Xyz&amp;quot;)
    public String xyz;

    @Column(name = &amp;quot;EMail&amp;quot;)
    public String email;

    @Column(name = &amp;quot;TryColumn&amp;quot;)
    public String tryColumn;


    @Column(name = &amp;quot;Column3&amp;quot;)
    public String column3;

    

    public ModelSampleItem() {
        super();

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda ki yapıyı kullanarak istediğiniz Tablo yu oluşturmanız mümkün.&lt;/p&gt;

&lt;p&gt;Tabi bundan önce yapmamız gereken birkaç ayar var.&lt;/p&gt;

&lt;p&gt;Android uygulamamızın Manifest dosyasına custom Application Name tanımlıyoruz ve bu isimde bir Class oluşturuyoruz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;application
    android:name=&amp;quot;.app.AppController&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ve Application dan türeyen sınıfımız&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class AppController extends com.activeandroid.app.Application {


    @Override
    public void onCreate() {
        super.onCreate();

    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;com.activeandroid.app.Application&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Yukarıda ki sınıftan türetmek  aslında &lt;strong&gt;onCreate()&lt;/strong&gt; içerisinde &lt;strong&gt;ActiveAndroid.initializ(this)&lt;/strong&gt; ile aynı anlama gelmektedir.Ama yukarıda ki gibi yaparsak daha güzel bir görünüm olacaktır.&lt;/p&gt;

&lt;p&gt;Ve aşağıdaki meta-taglarını &lt;code&gt;&amp;lt;application&amp;gt;&lt;/code&gt; tagları arasıne ekliyoruz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;meta-data
    android:name=&amp;quot;AA_DB_NAME&amp;quot;
    android:value=&amp;quot;newiztop1.db&amp;quot; /&amp;gt;
&amp;lt;meta-data
    android:name=&amp;quot;AA_DB_VERSION&amp;quot;
    android:value=&amp;quot;1&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yapılandırma ayarlarımız bu kadar. Artık &lt;strong&gt;Items&lt;/strong&gt; benzeri tablolarınızı yukarıda ki gibi yazmanız ve uygulamanızı çalıştırmanız yeterli olacaktır.&lt;/p&gt;

&lt;p&gt;Yukarıda ki tabloya sonradan bir alan eklememiz gerekti. Uygulamamız büyüdükçe nelere ihtiyacı olacağını kestirmek imkansıza yakındır.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Column(name = &amp;quot;Column4&amp;quot;)
    public String column4;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alanımızı Items sınıfımıza ekliyoruz. Ama çalıştırdığımız da uygulamamız hata verecektir.&lt;/p&gt;

&lt;p&gt;Uygulamamıza yeni alan eklediğimizi bildirmek için biraz kıvranmamız gerekmekte.&lt;/p&gt;

&lt;p&gt;Öncelikle &lt;strong&gt;assets&lt;/strong&gt; klasörünün içine migrations isilmli bir klasör oluşturuyoruz. Bu ismi vermek zorunludur. assets/migrations&lt;/p&gt;

&lt;p&gt;Ve oluşturduğumuz migrations klasörüne &lt;strong&gt;2.sql&lt;/strong&gt; isimli bir dosya oluşturuyoruz.Niye 2 peki?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;meta-data
    android:name=&amp;quot;AA_DB_NAME&amp;quot;
    android:value=&amp;quot;newiztop1.db&amp;quot; /&amp;gt;

&amp;lt;meta-data
    android:name=&amp;quot;AA_DB_VERSION&amp;quot;
    android:value=&amp;quot;1&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Android Manifest dosyasına yapılandırırken &lt;strong&gt;DB_VERSION&lt;/strong&gt; olarak 1 verdik. Bura da belirttiğimiz sayının bir fazlası olması gerekiyor *.sql dosyamızın ismi.&lt;/p&gt;

&lt;p&gt;Ve &lt;strong&gt;2.sql&lt;/strong&gt; dosyamızın içine&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;BEGIN TRANSACTION;
ALTER TABLE Items ADD COLUMN Column4 TEXT;
COMMIT;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ekliyoruz.&lt;/p&gt;

&lt;p&gt;Ve çalıştırdığımız da &lt;strong&gt;Items&lt;/strong&gt; tablomuza &lt;strong&gt;Column4&lt;/strong&gt; isimli bir alan eklenmiş olacaktır.Artık bu alanımızı da gönül rahatlığıyla kullanabiliriz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Items Tablomuza herhangi bir satır eklemek istersek :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ModelSampleItem msi = new ModelSampleItem();
msi.name = &amp;quot;Aykut&amp;quot;;
msi.surname = &amp;quot;Asil&amp;quot;;
msi.phoneNumber = &amp;quot;535&amp;quot;;
msi.email = &amp;quot;huuuu@gmail.com&amp;quot;;
msi.xyz = &amp;quot;xy&amp;lt;&amp;quot;;
msi.Column4 = &amp;quot;merhaba&amp;quot;;
msi.save();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dememiz yeterli olacaktır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Kaydedilmiş bir veriyi okumak istersek :&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ModelSampleItem myModel = Model.load(ModelSampleItem.class, 6); // id si 6 olan veriyi getirir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;veya&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;ModelSampleItem&amp;gt; listMOdel = new Select().from(ModelSampleItem.class).execute(); // Tüm verileri List şeklinde getirir.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;İhityacınıza yönelik sorgulamalar yapabilirsiniz. Tek yapmanız gereken biraz kurcalamak.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android Key Hashes &amp; SHA1</title>
      <link>http://yazilim.aykutasil.com/2017/01/android-key-hashes--sha1/</link>
      <pubDate>Tue, 10 Jan 2017 23:56:35 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/android-key-hashes--sha1/</guid>
      <description>

&lt;h1 id=&#34;android-key-hashes-sha1&#34;&gt;Android Key Hashes &amp;amp; SHA1&lt;/h1&gt;

&lt;p&gt;Windows komut satırına aşağıdaki komutu yazarak ulaşabilirsiniz.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;keytool -exportcert -alias androiddebugkey -keystore %HOMEPATH%\.android\debug.keystore | openssl sha1 -binary | openssl base64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;openssl hatası alırsanız &lt;a href=&#34;https://code.google.com/p/openssl-for-windows/downloads/detail?name=openssl-0.9.8k_X64.zip&#34;&gt;https://code.google.com/p/openssl-for-windows/downloads/detail?name=openssl-0.9.8k_X64.zip&lt;/a&gt; adresindeki dosyayı indirdikten sonra çıkan dosyadaki bin klasörünü ortam değişkenlerindeki PATH kısmına eklerseniz sorun ortadan kalkacaktır.&lt;/p&gt;

&lt;p&gt;Ortam değişkenlerine ulaşmak için : &lt;strong&gt;Denetim Masası &amp;gt; Sistem &amp;gt; Gelişmiş Sİstem Ayarları&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SHA1 ulaşmak için komut satırına aşağıdaki kodu yazmanız yeterli olacaktır.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;your_user_name&lt;/strong&gt; yerine kendi kullanıcı adınızı yazmayı unutmayın.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;keytool -list -v -keystore c:\users\your_user_name\.android\debug.keystore -alias androiddebugkey -storepass android -keypass android
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Android Spinner Text Güncelleme</title>
      <link>http://yazilim.aykutasil.com/2017/01/android-spinner-text-g%C3%BCncelleme/</link>
      <pubDate>Tue, 10 Jan 2017 23:00:03 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/android-spinner-text-g%C3%BCncelleme/</guid>
      <description>

&lt;h2 id=&#34;dinamik-olarak-spinner-text-güncelleme&#34;&gt;Dinamik Olarak Spinner Text Güncelleme&lt;/h2&gt;

&lt;p&gt;Android de Spinner yapısı açılır menü (dropdown) olarak kullanlan kullanışlı bir componenttir.&lt;/p&gt;

&lt;p&gt;Farklı ihtiyaçlarınız doğrultusunda Spinner ınızın elemanlarının değerini değiştirmek isteyebilirsiniz.&lt;/p&gt;

&lt;p&gt;Örneğin bir ListView iniz var.Ve içerisinde aynı kategoriden ama değişik durumlara sahip itemlar var ve siz bu itemları durumuna göre gruplandırıp sayısını Spinner da göstermek istiyorsunuz. Bunun için aşağıda belirtecek olduğum yapıyı kullanabilirsiniz.&lt;/p&gt;

&lt;p&gt;Öncellikle String.xml dosyasına Spinner ımızda göstereceğimiz elemanları tanımlıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;String.xml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;string name=&amp;quot;pazartesi&amp;quot;&amp;gt;Pazartesi&amp;lt;/string&amp;gt;
&amp;lt;string name=&amp;quot;sali&amp;quot;&amp;gt;Salı&amp;lt;/string&amp;gt;
&amp;lt;string name=&amp;quot;carsamba&amp;quot;&amp;gt;Çarşamba&amp;lt;/string&amp;gt;
&amp;lt;string name=&amp;quot;persembe&amp;quot;&amp;gt;Perşembe&amp;lt;/string&amp;gt;
&amp;lt;string name=&amp;quot;cuma&amp;quot;&amp;gt;Cuma&amp;lt;/string&amp;gt;
&amp;lt;string name=&amp;quot;cumartesi&amp;quot;&amp;gt;Cumartesi&amp;lt;/string&amp;gt;
&amp;lt;string name=&amp;quot;pazar&amp;quot;&amp;gt;Pazar&amp;lt;/string&amp;gt;


&amp;lt;string-array name=&amp;quot;array_gonderi_list_haftalik&amp;quot;&amp;gt;
    &amp;lt;item&amp;gt;@string/pazartesi&amp;lt;/item&amp;gt;
    &amp;lt;item&amp;gt;@string/sali&amp;lt;/item&amp;gt;
    &amp;lt;item&amp;gt;@string/carsamba&amp;lt;/item&amp;gt;
    &amp;lt;item&amp;gt;@string/persembe&amp;lt;/item&amp;gt;
    &amp;lt;item&amp;gt;@string/cuma&amp;lt;/item&amp;gt;
    &amp;lt;item&amp;gt;@string/cumartesi&amp;lt;/item&amp;gt;
    &amp;lt;item&amp;gt;@string/pazar&amp;lt;/item&amp;gt;
&amp;lt;/string-array&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;SpinnerHelper.java&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static String[] getChangedSpinnerItemText(Context context) {
    String[] originalList = context.getResources().getStringArray(R.array.array_gonderi_list_haftalik);

    Resources resources = context.getResources();
    for (int a = 0; a &amp;lt; originalList.length; a++) {
        int count = 0;
        if (originalList[a].equals(resources.getString(R.string.pazartesi))) {
            count = 2;
            originalList[a] += &amp;quot; ( &amp;quot; + count + &amp;quot; )&amp;quot;;
        } else if (originalList[a].equals(resources.getString(R.string.sali))) {
            count = 4;
            originalList[a] += &amp;quot; ( &amp;quot; + count + &amp;quot; )&amp;quot;;
        } else if (originalList[a].equals(resources.getString(R.string.carsamba))) {
            count = 7;
            originalList[a] += &amp;quot; ( &amp;quot; + count + &amp;quot; )&amp;quot;;
        } else {
            count = 8
            originalList[a] += &amp;quot; ( &amp;quot; + count + &amp;quot; )&amp;quot;;
        }
    }
    return originalList;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Daha sonra spinnerımızı tanımladığımız yere giderek spinnerımızı yapılandırıyoruz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FragmentX.java&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public void setSpinnerNavToolbar() {

 // Guncelledikten sonra spinner görünümü örneği
 // Pazartesi ( 2 )
 // Salı ( 4 )
 // ... 
 
 // Spinner itemlarının güncellenmiş halini barındıran listeyi getiriyoruz.
 String[] changedList = getChangedSpinnerItemText(context);

 // Spinner adapterımıza eklemeler yapılmış String Arrayi veriyoruz.
 ArrayAdapter&amp;lt;CharSequence&amp;gt; adapter = new ArrayAdapter&amp;lt;CharSequence&amp;gt;(mContext, R.layout.spinner_nav_item_layout,changedList);
 Spinner spinner = (Spinner) findViewById(R.id.spinner_nav);
 spiner.setAdapter(adapter);
 spinner.setVisibility(NavigationView.VISIBLE);
 spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
 @Override
 public void onItemSelected(AdapterView&amp;lt;?&amp;gt; parent, View view, int position, long id) {

 // Original Liste elemanlarımızı getiriyoruz 
 String[] originalList = context.getResources().getStringArray(R.array.array_gonderi_list_haftalik);
 
 // Original Liste elemanını baz alarak işlem yapmak 
 // Bu sayede Pazartesi , Salı gibi değerleri alıyoruz. Değiştirilmiş (güncellenmiş) değerleri sadece görünüm için kullanıyoruz.
 String secilendeger = originalList[position];


 // Pazartesi seçildiğinde yapmak istediğimiz işlemleri burada belirtebiliriz.
 if (secilendeger.equals(getResources().getString(R.string.pazartesi))) {

 } 
 // Salı seçildiğinde yapmak istediğimiz işlemleri burada belirtebiliriz.
 else if(secilendeger.equals(getResources().getString(R.string.pazartesi)))
 {

 }
 }

 @DebugLog
 @Override
 public void onNothingSelected(AdapterView&amp;lt;?&amp;gt; parent) {

 }
 });
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Runnable() &amp; Callable()</title>
      <link>http://yazilim.aykutasil.com/2017/01/runnable--callable/</link>
      <pubDate>Tue, 10 Jan 2017 22:44:52 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/runnable--callable/</guid>
      <description>

&lt;h1 id=&#34;runnable-callable&#34;&gt;Runnable() &amp;amp; Callable()&lt;/h1&gt;

&lt;p&gt;Ayrıntılı açıklama için &lt;a href=&#34;http://www.java67.com/2013/01/difference-between-callable-and-runnable-java.html&#34;&gt;bu siteyi&lt;/a&gt; kullanabilirsiniz.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android ile WebView Etkileşimi</title>
      <link>http://yazilim.aykutasil.com/2016/12/android-ile-webview-etkile%C5%9Fimi/</link>
      <pubDate>Sun, 25 Dec 2016 00:28:10 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2016/12/android-ile-webview-etkile%C5%9Fimi/</guid>
      <description>

&lt;p&gt;Kısa Hikaye : Üstünde çalışmakta olduğum bir projede kredi kartı ile ödeme yapısı kurmam gerekti. Kısaca projenin yapısından bahsedecek olursak&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Backend : .Net&lt;/li&gt;
&lt;li&gt;Client : Android (Java)&lt;/li&gt;
&lt;li&gt;Ödeme altyapısı : İyzico&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Client tarafında rest isteğiyle tüm işlemlerimizi backend tarafında yapıyoruz. Ödeme yapımızı da bu doğrultuda geliştirdik.&lt;/p&gt;

&lt;p&gt;Problem : 3DS ile ödeme almaya çalıştığımızda malumunuz işin içerisine bankanın bize telefonumuza gelen şifreyi girmemiz için göndermiş olduğu web sayfası vs. giriyor. Bu durumda client ile web sayfası iletişimini de bir şekilde sağlamamız gerekiyor.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Yukarıda ki hikayeyi anlatarak kafanızda bir problemi canlandırmaya çalıştım. Benzer bir çok durum ile karşı karşıya kalabilirsiniz.&lt;/p&gt;

&lt;p&gt;Ulan ben webview de ki butonu vs nasıl android tarafında kontrol edicem ? gibi akılda deli sorular oluşabilir..&lt;/p&gt;

&lt;p&gt;Tabiri caiz ise : PhoneGap tarzı bişiler.. 🙂 😉&lt;/p&gt;

&lt;p&gt;Neyse.&lt;/p&gt;

&lt;p&gt;Örnek ver hacı abi;&lt;/p&gt;

&lt;h2 id=&#34;layout-xml&#34;&gt;Layout.xml&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;LinearLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;
    android:orientation=&amp;quot;vertical&amp;quot;&amp;gt;

    &amp;lt;WebView
        android:id=&amp;quot;@+id/WebView&amp;quot;
        android:layout_width=&amp;quot;match_parent&amp;quot;
        android:layout_height=&amp;quot;match_parent&amp;quot; /&amp;gt;

&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;activity-fragment&#34;&gt;Activity – Fragment&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;WebView webView = (WebView) findViewById(R.id.WebView);

WebSettings settings = webView.getSettings();
settings.setDefaultTextEncodingName(&amp;quot;utf-8&amp;quot;);
settings.setJavaScriptEnabled(true);

webView.setWebViewClient(new MyWebViewClient());
webView.addJavascriptInterface(new MyWebViewJavascriptInterface(mContext, webView, callbackDialog), &amp;quot;Android&amp;quot;); // Buraya dikkat
webView.loadDataWithBaseURL(null, response.getData().getThreeDSHtmlContent(), &amp;quot;text/html&amp;quot;, &amp;quot;utf-8&amp;quot;, null); // elimizde bulunan bir html dökümanı webview e basıyoruz. URL de verebilirsin istersen
webView.addJavascriptInterface(new MyWebViewJavascriptInterface(mContext, webView, callbackDialog), &amp;quot;Android&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda ki “Android” kısmına istediğimiz ismi verebiliriz. WebView yapısı, burada belirtmiş olduğumuz isim ile sayfaya yüklenen içeriğe bir eklenti yapıyor, yani bir instance alıyor. Biz bu instance ı kullanarak iletişimimizi sağlıyoruz.&lt;/p&gt;

&lt;p&gt;Az sabır. Nasıl olduğunu görüceksin..&lt;/p&gt;

&lt;h2 id=&#34;mywebviewclient&#34;&gt;MyWebViewClient&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class MyWebViewClient extends WebViewClient {

    @Override
    public void onPageFinished(WebView view, String url) {
        super.onPageFinished(view, url);
        //view.loadUrl(&amp;quot;javascript:window.Android.processHTML(&#39;&amp;lt;html&amp;gt;&#39;+document.getElementsByTagName(&#39;html&#39;)[0].innerHTML+&#39;&amp;lt;/html&amp;gt;&#39;);&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bu blok ne yapıyor ?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;window.Android.processHTML&lt;/strong&gt; de ki Android bizim yukarıda belirtmiş olduğumuz aracı.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;processHtml&lt;/strong&gt; ise aşağıda tanımlıcak olduğumuz fonksiyon.&lt;/p&gt;

&lt;p&gt;Diğer kısımlar javascript fonksiyonu zaten. Yani sayfada ki ilk html tag ını bularak içindeki html kodu al.&lt;/p&gt;

&lt;p&gt;Aşağıda ki processHtml e bakarsan görüceksin ki htmlContent parametresi bekliyor.Biz de bu parametreye sayfa içeriğinin html kodunu gönderiyoruz. Almış olduğun bu html içeriğiyle ne yaparsın sana kalmış.&lt;/p&gt;

&lt;h2 id=&#34;mywebviewjavascriptinterface&#34;&gt;MyWebViewJavascriptInterface&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class MyWebViewJavascriptInterface {

    Context mContext;
    WebView mWebView;

    MyWebViewJavascriptInterface(Context c, WebView webView) {
        this.mContext = c;
        this.mWebView = webView;
    }

    @JavascriptInterface
    public void processHTML(String htmlContent) {
        // işlem
        // Toast ile html içeriğini gösterebiliriz       
    }

    @JavascriptInterface
    public void islemeDevamEt() {
       // işlem
    }

    @JavascriptInterface
    public void pencereyiKapat() {
        // işlem
        // dialog.dismiss();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WebView miz ile Android native kodumuzun iletişimini bu sınıf sağlıyor.&lt;/p&gt;

&lt;p&gt;Aşşağıda ki  kod ile bunu söylüyoruz.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;webView.addJavascriptInterface(new MyWebViewJavascriptInterface(mContext, webView), &amp;ldquo;Android&amp;rdquo;);&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Not&lt;/em&gt;&lt;/strong&gt; : Android 4.2 den sonra &lt;strong&gt;@JavascriptInterface&lt;/strong&gt; annotations ını eklememiz gerekmekte. Yoksa nolur ? Çalışmaz 😉&lt;/p&gt;

&lt;h2 id=&#34;custom-html-content&#34;&gt;Custom Html Content&lt;/h2&gt;

&lt;p&gt;WebView de gösterdiğimiz html contentinde bir buton ekleyelim.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt; &amp;lt;button class=&amp;quot;btn btn-danger&amp;quot; onclick=&amp;quot;PencereyiKapat()&amp;quot;&amp;gt;Pencereyi Kapat&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WebView içinde ki bu butona basıldığını Android anlasın ve (WebView imizi Dialog içerisinde gösterildiğini varsayarak) dialog penceresini kapasın.&lt;/p&gt;

&lt;p&gt;Butonumuzun olduğu sayfaya  javascript kodumuzu ekliyoruz.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
  function PencereyiKapat() {
     Android.pencereyiKapat();
  }
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda ki Android i hatırladınız dimi ? 🙂&lt;/p&gt;

&lt;p&gt;HTML sayfamız bu kadar.&lt;/p&gt;

&lt;p&gt;WebView içerisinde ki butona basıldığında javascript fonksiyonu çalışacak ve Android.pencereyiKapat() çalışacak. Yani native tarafta tanımlamış olduğumuz pencereyiKapat() fonksiyonu.&lt;/p&gt;

&lt;p&gt;Yukarıda ki yapıyı kullanarak WebView – Android Native etkileşimli yapı kurabilirsin.&lt;/p&gt;

&lt;p&gt;Her zaman ki gibi hayal gücüne ve projeye kalmış 😉&lt;/p&gt;

&lt;p&gt;Kalın sağlıcakla..&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
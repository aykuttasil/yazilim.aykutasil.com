<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software</title>
    <link>http://yazilim.aykutasil.com/tags/palette/index.xml</link>
    <description>Recent content on Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr-tr</language>
    <atom:link href="http://yazilim.aykutasil.com/tags/palette/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Android Glide ve Palette KullanÄ±mÄ±</title>
      <link>http://yazilim.aykutasil.com/2017/01/android-glide-ve-palette-kullan%C4%B1m%C4%B1/</link>
      <pubDate>Wed, 11 Jan 2017 17:11:30 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/android-glide-ve-palette-kullan%C4%B1m%C4%B1/</guid>
      <description>&lt;p&gt;Google Ä±n resim iÅŸlemleri iÃ§in geliÅŸtirmiÅŸ olduÄŸu Glide kÃ¼tÃ¼phanesi Android kaynaklarÄ±nÄ±, cache mekanizmasÄ±nÄ± vs. verimli ÅŸekilde kullanarak uygulamanÄ±za hÄ±z ve kalite kazandÄ±rÄ±r.&lt;/p&gt;

&lt;p&gt;Sizde projenizde resimlerle ilgili herhangi bir iÅŸlem yapÄ±yorsanÄ±z bu kÃ¼tÃ¼phaneyi incelemenizi tavsiye ediyorum.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Github :&lt;/strong&gt; &lt;a href=&#34;https://github.com/bumptech/glide&#34;&gt;https://github.com/bumptech/glide&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Gradle :&lt;/strong&gt; &lt;code&gt;compile â€˜com.github.florent37:glidepalette:1.0.6â€™&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Google Ä±n geliÅŸtirmiÅŸ olduÄŸu Palette kÃ¼tÃ¼phanesi ise, resimlerinizin renkleriyle ilgilenir. Daha farklÄ± iÅŸlemler iÃ§inde kullanÄ±labilir resim boyutlandÄ±rma vs. gibi. Ama renklerle ilgili iÅŸlemler iÃ§in oldukÃ§a gÃ¼zel bir kÃ¼tÃ¼phanedir.&lt;/p&gt;

&lt;p&gt;Link : &lt;a href=&#34;http://developer.android.com/reference/android/support/v7/graphics/Palette.html&#34;&gt;Android Developer&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Gradle : compile â€˜com.android.support:palette-v7:23.1.1â€™&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bu iki gÃ¼zel kÃ¼tÃ¼phanenin birlikte kullanÄ±mÄ± ile oldukÃ§a gÃ¼zel iÅŸler Ã§Ä±kabilir&lt;/p&gt;

&lt;p&gt;Bunun iÃ§in de bir kÃ¼tÃ¼phane mevcut ğŸ™‚&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Github :&lt;/strong&gt; &lt;a href=&#34;https://github.com/florent37/GlidePalette&#34;&gt;https://github.com/florent37/GlidePalette&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; Glide.with(mContext).load(&amp;quot;ImageAdress&amp;quot;)
                         // Her resim iÃ§in farklÄ± bir signature belirtmeliyiz. Bu sayede resimlerin tekrar tekrar yÃ¼klenmesini engellemiÅŸ oluruz.
                        .signature(new StringSignature(&amp;quot;ImageSignature&amp;quot;))
                        .centerCrop()
                        .listener(GlidePalette.with(&amp;quot;ImageAdress&amp;quot;)
                                        .use(GlidePalette.Profile.VIBRANT_LIGHT)
                                        .intoTextColor(txt, GlidePalette.Swatch.BODY_TEXT_COLOR)
                                        .crossfade(true)

                                         // BelirttiÄŸimiz ImageAdress den gelen resmimiz kullanÄ±lmaya hazÄ±r olduÄŸunda burada yakalayabilir ve 
                                         // istediÄŸimiz Ã¶zelleÅŸtirmeyi yapabiliriz.
                                         // Biz burada yÃ¼klenen resmin palette.getDarkMutedColor(DefaultColor) fonksiyonu ile rengini yakalÄ±yoruz ve CollapsingToolbar Ä±n expand olduÄŸu durumda ki title rengini deÄŸiÅŸtiriyoruz.
                                        .intoCallBack(new BitmapPalette.CallBack() {
                                            @Override
                                            public void onPaletteLoaded(@Nullable Palette palette) {
                                                mCollapsingToolbar.setExpandedTitleColor(palette.getDarkMutedColor(Color.BLACK));
                                            }
                                        })
                                        /*
                                        .setGlideListener(new RequestListener&amp;lt;String, GlideDrawable&amp;gt;() {
                                            @Override
                                            public boolean onException(Exception e, String model, Target&amp;lt;GlideDrawable&amp;gt; target, boolean isFirstResource) {
                                                return false;
                                            }

                                            @Override
                                            public boolean onResourceReady(GlideDrawable resource, String model, Target&amp;lt;GlideDrawable&amp;gt; target, boolean isFromMemoryCache, boolean isFirstResource) {
                                                return false;
                                            }
                                        })
                                        // optional: do stuff with the builder
                                        .setPaletteBuilderInterceptor(new BitmapPalette.PaletteBuilderInterceptor() {
                                            @NonNull
                                            @Override
                                            public Palette.Builder intercept(Palette.Builder builder) {
                                                return builder.resizeBitmapSize(100);
                                            }
                                        })
                                        */
                        )
                        .into(mCollapsingImageView);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
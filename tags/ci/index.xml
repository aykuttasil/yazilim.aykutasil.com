<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ci on Software</title>
    <link>https://yazilim.aykutasil.com/tags/ci/</link>
    <description>Recent content in Ci on Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr</language>
    <lastBuildDate>Thu, 24 Jan 2019 23:55:53 +0300</lastBuildDate>
    
	<atom:link href="https://yazilim.aykutasil.com/tags/ci/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Android Static Code Analysis</title>
      <link>https://yazilim.aykutasil.com/post/android_static_code_analysis/</link>
      <pubDate>Thu, 24 Jan 2019 23:55:53 +0300</pubDate>
      
      <guid>https://yazilim.aykutasil.com/post/android_static_code_analysis/</guid>
      <description>Nedir ? Statik kod analizi, uygulama kodlarınızın mevcut standartlara uygunluğu, uygulama kodları içerisindeki değişken isimlerinin ilk harfinin küçük olması, sınıf isimlerinin büyük harfle başlaması gibi genelde kod görünümü ile alakalı sorunların bulunmasını sağlar. Bununla birlikte bazı statik kod analiz araçları uygulama kodlarınızı mantıksal çerçevede değerlendirmesini de sağlayabilir. Veya yazılan platform/dil özelinde çok sık yapılan bazı hatalı kodlamaların farkedilmesini sağlayabilir.
Bir diğer faydası da uygulama kodlarını kaç kişi geliştiriyor olursa olsun sanki tek bir kişinin elinden çıkmış gibi düzenin korunmasını sağlar.</description>
    </item>
    
    <item>
      <title>Android CircleCI Configuration</title>
      <link>https://yazilim.aykutasil.com/post/android_circleci/</link>
      <pubDate>Sat, 01 Dec 2018 14:20:45 +0300</pubDate>
      
      <guid>https://yazilim.aykutasil.com/post/android_circleci/</guid>
      <description>CircleCI Android Yapılandırması .circleci/config.yml version: 2 jobs: build: working_directory: ~/code docker: - image: circleci/android:api-28-alpha environment: JVM_OPTS: -Xmx3200m steps: - checkout - run: name: Initialize Keystore File command: echo $KEYSTORE_BASE64 | base64 --decode &amp;gt; app/aykutasilkeystore - run: name: Initialize Fabric Properties command: | echo &amp;quot;apiKey=$FABRIC_API_KEY&amp;quot; &amp;gt;&amp;gt; app/fabric.properties echo &amp;quot;apiSecret=$FABRIC_API_SECRET&amp;quot; &amp;gt;&amp;gt; app/fabric.properties cat app/fabric.properties - run: name: Initialize Keystore File command: | echo &amp;quot;signingKeyAlias=$KEYSTORE_KEY_ALIAS&amp;quot; &amp;gt;&amp;gt; keystore.properties echo &amp;quot;signingKeyAliasPassword=$KEYSTORE_KEY_ALIAS_PASSWORD&amp;quot; &amp;gt;&amp;gt; keystore.properties echo &amp;quot;signingStoreFile=$KEYSTORE_STORE_FILE&amp;quot; &amp;gt;&amp;gt; keystore.</description>
    </item>
    
    <item>
      <title>CircleCI Configuration</title>
      <link>https://yazilim.aykutasil.com/post/circleci/</link>
      <pubDate>Tue, 27 Nov 2018 14:20:45 +0300</pubDate>
      
      <guid>https://yazilim.aykutasil.com/post/circleci/</guid>
      <description>CI/CD Uygulamaların build/test/depleyment süreçlerini otomatize etmemizi sağlayan CI/CD kavramları günümüz yazılım dünyasında olmazsa olmaz, bilinmezse ayıp olurlar arasına girmiş bulunmaktadır. Manuel yapılan bu işlemlerin otomatize edilmesi bize ve takım üyelerine çeşitli konularda fayda sağlayacak ve eğer manuel yöntemler ile ilerlendiği takdirde oluşabilecek hataları minimuma indirecektir. Projenizin build/test/deployment adımlarında çeşitli sorunlar yaşamaya başlamışsanız ya da başlamadan bitirmek istiyorsanız bu kavramları öğrenmekte fayda var.
Çeşitli CI/CD araçları bulunmaktadır. Travis, Bitrise, AppCenter, CircleCI bunlardan bazılarıdır.</description>
    </item>
    
  </channel>
</rss>
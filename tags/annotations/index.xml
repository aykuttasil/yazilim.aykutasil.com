<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Annotations on Software</title>
    <link>http://yazilim.aykutasil.com/tags/annotations/</link>
    <description>Recent content in Annotations on Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr</language>
    <lastBuildDate>Sun, 09 Jul 2017 00:00:00 +0300</lastBuildDate>
    
	<atom:link href="http://yazilim.aykutasil.com/tags/annotations/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kotlin @JvmOverloads</title>
      <link>http://yazilim.aykutasil.com/post/kotlin_jvmoverloads/</link>
      <pubDate>Sun, 09 Jul 2017 00:00:00 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/post/kotlin_jvmoverloads/</guid>
      <description>Kotlin @JvmOverloads Kotlin ile uygulama geliştirmeyi teşvik eden en büyük etkenlerden biri şüphesiz Java dili uyumlu yapısıdır. Her iki tarafdan da birbirlerine referanslar verilebilir.
Kotlin dilinin Java&amp;rsquo;dan ayıran özelliklerinden biri Java compiler ından daha zeki olmasıdır. Nitekim java dili yaşlanıyor :). Kotlin ile oluşturulan bazı yapıların Java tarafına uyumlu hale getirilmesi için bazen ufak düzenlemelere gerek duyulabiliyor. Bu düzenlemelerden bir tanesi de @JvmOverloads annotation kullanımı.
fun ViewGroup.inflate(resId: Int, attachToRoot: Boolean = false): View { return LayoutInflater.</description>
    </item>
    
  </channel>
</rss>
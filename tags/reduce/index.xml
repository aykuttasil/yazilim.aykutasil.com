<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software</title>
    <link>http://yazilim.aykutasil.com/tags/reduce/index.xml</link>
    <description>Recent content on Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr-tr</language>
    <atom:link href="http://yazilim.aykutasil.com/tags/reduce/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>RxJava reduce() KullanÄ±mÄ±</title>
      <link>http://yazilim.aykutasil.com/2017/01/rxjava-reduce-kullan%C4%B1m%C4%B1/</link>
      <pubDate>Wed, 11 Jan 2017 18:42:04 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/rxjava-reduce-kullan%C4%B1m%C4%B1/</guid>
      <description>

&lt;h1 id=&#34;rxjava-reduce-kullanÄ±mÄ±&#34;&gt;RxJava reduce() KullanÄ±mÄ±&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;reduce()&lt;/strong&gt; fonskyionu iki ÅŸekilde Ã§alÄ±ÅŸÄ±r;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;.reduce(new BiFunction&amp;lt;Integer, Integer, Integer&amp;gt;() {
    @Override
    public Integer apply(Integer val1, Integer val2) throws Exception {
        return null;
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;2&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;.reduce(10,new BiFunction&amp;lt;Integer, Integer, Integer&amp;gt;() {
    @Override
    public Integer apply(Integer val1, Integer val2) throws Exception {
        return null;
    }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1 ile 2 nin farkÄ±, 2 de gÃ¶rÃ¼ldÃ¼ÄŸÃ¼ Ã¼zere fonksiyona baÅŸlangÄ±Ã§ deÄŸeri atanabilmesidir.&lt;/p&gt;

&lt;p&gt;AÅŸaÄŸÄ±daki Ã¶rneklerde daha net gÃ¶rebilirsiniz.&lt;/p&gt;

&lt;p&gt;RxJavaâ€™nÄ±n reduce fonksiyonunu tanÄ±mlÄ±cak olursak;&lt;/p&gt;

&lt;p&gt;Observable nesnesine ait her bir item a (1 , 3, 5) fonksiyon uygulanmasÄ±nÄ± saÄŸlar. Bunu map() gibi fonksiyonlarda saÄŸlÄ±yor. Ama tabi reduce bunu farklÄ± bir ÅŸekilde yapÄ±yor.&lt;/p&gt;

&lt;p&gt;EÄŸer ilk deÄŸer (seed) atanmamÄ±ÅŸ ise ilk deÄŸer olarak (val1) ilk item Ä± (1) alÄ±yor.&lt;/p&gt;

&lt;p&gt;Daha sonra biz her item a yapmasÄ± gereken iÅŸlem olarak iki deÄŸeri toplamasÄ±nÄ± sÃ¶ylediÄŸimiz iÃ§in, ilk deÄŸer ve ikinci deÄŸeri toplayÄ±p bunu bir sonraki iÅŸlem iÃ§in ilk deÄŸer olarak atÄ±yor. Ä°kinci iterasyonda kaldÄ±ÄŸÄ± yerden devam ederek, ilk deÄŸer olarak bir Ã¶nceki iÅŸlemin sonucu ve ikinci deÄŸer olarak 2. item Ä± alÄ±yor. Yine toplama iÅŸlemi yaparak bir sonraki iÅŸlem iÃ§in ilk deÄŸer atamasÄ± yapÄ±yor.&lt;/p&gt;

&lt;p&gt;TÃ¼m item lar ile iÅŸlem yapÄ±ncaya kadar devam ediyor ve sonuÃ§ subscribe.onSuccess in iÃ§ine dÃ¼ÅŸÃ¼yor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void reduce() {
    Observable.just(1, 3, 5)
            .reduce((val1, val2) -&amp;gt; {
                Log.i(TAG, &amp;quot;val1: &amp;quot; + val1.toString());
                Log.i(TAG, &amp;quot;val2: &amp;quot; + val2.toString());
                return val1 + val2;
            }).retry()
            .subscribeOn(Schedulers.computation())
            .subscribe(success -&amp;gt; {
                Log.i(TAG, &amp;quot;Sonuc:&amp;quot; + success.toString());
            });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ã‡Ä±ktÄ±:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I/MainActivity: val1: 1
I/MainActivity: val2: 3
I/MainActivity: val1: 4
I/MainActivity: val2: 5
I/MainActivity: Sonuc:9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Burda yukarÄ±da ki iÅŸlemden farklÄ± olarak ek bir iterasyon daha yapÄ±lÄ±yor. Ã‡Ã¼nkÃ¼ ilk deÄŸer atamasÄ±nÄ± biz kendimiz yapÄ±yoruz. Ä°kinci deÄŸer olarak da her item sÄ±rayla bu gÃ¶revi Ã¼stleniyor. Ve toplama iÅŸlemi yapÄ±lÄ±p, toplam sonucunu ilk deÄŸer olarak atadÄ±ktan sonra dÃ¶ngÃ¼ devam ediyor. Ve sonuÃ§ subscribe.onSuccess e dÃ¼ÅŸÃ¼yor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void reduce() {
    Observable.just(1, 3, 5).reduce(10, (val1, val2) -&amp;gt; {
        Log.i(TAG, &amp;quot;val1: &amp;quot; + val1.toString());
        Log.i(TAG, &amp;quot;val2: &amp;quot; + val2.toString());
        return val1 + val2;
    }).retry()
            .subscribeOn(Schedulers.computation())
            .subscribe(success -&amp;gt; {
                Log.i(TAG, &amp;quot;Sonuc:&amp;quot; + success.toString());
            });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ã‡Ä±ktÄ±:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I/MainActivity: val1: 10
I/MainActivity: val2: 1
I/MainActivity: val1: 11
I/MainActivity: val2: 3
I/MainActivity: val1: 14
I/MainActivity: val2: 5
I/MainActivity: Sonuc:19
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RxJava candÄ±r ğŸ˜‰&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software</title>
    <link>http://yazilim.aykutasil.com/tags/kotlin/index.xml</link>
    <description>Recent content on Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr-tr</language>
    <atom:link href="http://yazilim.aykutasil.com/tags/kotlin/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Kotlin apply Kullanımı</title>
      <link>http://yazilim.aykutasil.com/kotlin_apply</link>
      <pubDate>Tue, 06 Jun 2017 10:47:58 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/kotlin_apply</guid>
      <description>&lt;pre&gt;&lt;code&gt;fun &amp;lt;T&amp;gt; T.apply(f: T.() -&amp;gt; Unit): T { f(); return this }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;apply()&lt;/code&gt; tüm tipler için belirlenmiş bir extension function dır. apply() fonksiyonu uygulanan nesnenin özelliklerine direk olarak apply kod bloğu içerisinden erişilebilir.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var file = File(dir)
file.mkdirs()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;veya Java ile yazıcak olursak&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;File makeDir(String path) {
    File result = new File(path);
    result.mkdirs();
    return result;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda ki kod şu şekilde yazılabilir:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;File(dir).apply { mkdirs() }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Kotlin when kullanımı</title>
      <link>http://yazilim.aykutasil.com/kotlin_when</link>
      <pubDate>Tue, 06 Jun 2017 04:42:56 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/kotlin_when</guid>
      <description>&lt;p&gt;Kotlin&amp;rsquo;de &lt;code&gt;when&lt;/code&gt; operatörü oldukça işimizi kolaylaştıran operatörlerden biridir.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;if- else if&lt;/code&gt; yapısı yerine kullanılabileceği gibi bazı yardımcı operatörler ile birçok marifet kazanabilir.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    val i = 10
    when {
        i &amp;lt; 7 -&amp;gt; println(&amp;quot;first block&amp;quot;)
        fooString.startsWith(&amp;quot;hello&amp;quot;) -&amp;gt; println(&amp;quot;second block&amp;quot;)
        else -&amp;gt; println(&amp;quot;else block&amp;quot;)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda ki örnek if-else if-else yapısının aynısıdır.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;    when (i) {
        0, 21 -&amp;gt; println(&amp;quot;0 or 21&amp;quot;)
        in 1..20 -&amp;gt; println(&amp;quot;in the range 1 to 20&amp;quot;)
        else -&amp;gt; println(&amp;quot;none of the above&amp;quot;)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda ki gibi aralıklar tanımlanabilir ve bu aralıklara uyum kontrolü yapılarak ilgili işlemlerin yapılması sağlanılabilir.&lt;/p&gt;

&lt;hr /&gt;

&lt;pre&gt;&lt;code&gt;
    var result = when (i) {
        0, 21 -&amp;gt; &amp;quot;0 or 21&amp;quot;
        in 1..20 -&amp;gt; &amp;quot;in the range 1 to 20&amp;quot;
        else -&amp;gt; &amp;quot;none of the above&amp;quot;
    }
    println(result)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda ki gibi &lt;code&gt;when&lt;/code&gt; sonucu bir değişkene atanarak istenilen yerde kullanılabilir.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kotlin Let Kullanımı</title>
      <link>http://yazilim.aykutasil.com/kotlin_let</link>
      <pubDate>Tue, 06 Jun 2017 04:33:06 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/kotlin_let</guid>
      <description>

&lt;h1 id=&#34;kotlin&#34;&gt;Kotlin&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;fun &amp;lt;T, R&amp;gt; T.let(f: (T) -&amp;gt; R): R = f(this)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;let()&lt;/code&gt; temel olarak, belirli bir kapsam için bir &lt;strong&gt;değişken/kod bloğu&lt;/strong&gt; oluşturmamızı sağlayan bir kapsamlayıcı işlevdir. Yani &lt;code&gt;let()&lt;/code&gt; bir sarmalıyıcı fonksiyondur.&lt;/p&gt;

&lt;p&gt;Örneğin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private var mPhotoUrl: String? = null

fun uploadClicked() {
    if (mPhotoUrl != null) {
        uploadPhoto(mPhotoUrl!!)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yukarıda ki &lt;code&gt;if (mPhotoUrl != null)&lt;/code&gt; satırı ile null kontrolü yapılır ve eğer &lt;code&gt;null&lt;/code&gt; değilse &lt;code&gt;uploadPhoto(mPhotoUrl!!)&lt;/code&gt; kod bloğu çalıştırılır. Bu kodu &lt;code&gt;let()&lt;/code&gt; ile çok daha kolay ve anlaşılır hale getirebiliriz.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    private var mPhotoUrl: String? = null

    fun uploadClicked() {
        mPhotoUrl?.let { uploadPhoto(it) }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt; &lt;code&gt;let()&lt;/code&gt; ile sarmalanan bir kod bloğu içerisinde sarmalayıcıya &lt;code&gt;it&lt;/code&gt; ile ulaşılabilir.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;File(&amp;quot;a.txt&amp;quot;).let {
    // it kullanılarak file nesnesine erişilebilir.
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
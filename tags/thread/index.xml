<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software</title>
    <link>http://yazilim.aykutasil.com/tags/thread/index.xml</link>
    <description>Recent content on Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>tr-tr</language>
    <atom:link href="http://yazilim.aykutasil.com/tags/thread/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Executor newCachedThreadPool() newFixedThreadPool(n) newSingleThreadExecutor()</title>
      <link>http://yazilim.aykutasil.com/2017/01/executor-newcachedthreadpool-newfixedthreadpooln-newsinglethreadexecutor/</link>
      <pubDate>Wed, 11 Jan 2017 18:55:08 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/executor-newcachedthreadpool-newfixedthreadpooln-newsinglethreadexecutor/</guid>
      <description>

&lt;h1 id=&#34;executor-newcachedthreadpool-newfixedthreadpool-n-newsinglethreadexecutor&#34;&gt;Executor newCachedThreadPool() newFixedThreadPool(n) newSingleThreadExecutor()&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Thread&lt;/strong&gt; kullanÄ±mÄ±, Java ile multi-threading yazÄ±lÄ±m geliÅŸtiriyorsanÄ±z mutlaka ama mutlaka bilmeniz gereken konulardan biridir.&lt;/p&gt;

&lt;h2 id=&#34;threadpool&#34;&gt;ThreadPool&lt;/h2&gt;

&lt;p&gt;GÃ¼n geldi Ã§attÄ± ve uygulamanÄ±z ilk kurulduÄŸu amacÄ±n evrimleÅŸmesi sonucu bambaÅŸka bir hale bÃ¼rÃ¼ndÃ¼ ğŸ™‚&lt;/p&gt;

&lt;p&gt;Yani birÃ§ok uygulamada gidiÅŸat bu yÃ¶ndedir ve olmasÄ± gerekende budur.&lt;/p&gt;

&lt;p&gt;AynÄ± anda 1000 den fazla kullanÄ±cÄ±ya cevap verme gereksinimiz var artÄ±k. Sadece patron kullanmÄ±yor sonuÃ§ta. Ya da patron Ã¶yle bir uygulama istemiÅŸki aÄŸÄ±r iÅŸler gerektiriyor. Uzun sÃ¼reler gerektiren iÅŸlemler sonucunda akÄ±ÅŸ tamamlanÄ±yor vs.&lt;/p&gt;

&lt;p&gt;SÃ¶zÃ¼n kÄ±sasÄ±;&lt;/p&gt;

&lt;p&gt;UygulamamÄ±z iÃ§erisinde ki akÄ±ÅŸlarÄ± ayrÄ± parÃ§alara bÃ¶lerek daha hÄ±zlÄ± Ã§alÄ±ÅŸmasÄ±nÄ± ve aynÄ± anda birden fazla iÅŸ yapmamÄ±zÄ± saÄŸlayan yapÄ±dÄ±r bu Thread ler.&lt;/p&gt;

&lt;p&gt;Peki en basitinden nasÄ±l kullanÄ±rÄ±z bu yapÄ±yÄ± ? Tabi hÃ¶dÃ¼k gibi deÄŸil, olmasÄ± gerektiÄŸi gibi.. ğŸ˜‰&lt;/p&gt;

&lt;h2 id=&#34;executors&#34;&gt;Executors&lt;/h2&gt;

&lt;p&gt;Executors sÄ±nÄ±fÄ± iÃ§erisinde statik olarak tanÄ±mlanmÄ±ÅŸ ve kolayca thread pool oluÅŸturabileceÄŸimiz yapÄ±lar mevcuttur.&lt;/p&gt;

&lt;h3 id=&#34;executors-newcachedthreadpool&#34;&gt;EXECUTORS.NEWCACHEDTHREADPOOL()&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;
Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available. These pools will typically improve the performance of programs that execute many short-lived asynchronous tasks. Calls to execute will reuse previously constructed threads if available. If no existing thread is available, a new thread will be created and added to the pool. Threads that have not been used for sixty seconds are terminated and removed from the cache. Thus, a pool that remains idle for long enough will not consume any resources. Note that pools with similar properties but different details (for example, timeout parameters) may be created using ThreadPoolExecutor constructors.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Resmi kaynaklardan yukarÄ±daki tanÄ±mlama yapÄ±lmÄ±ÅŸ.&lt;/p&gt;

&lt;p&gt;Yani Ã¶zetlicek olursak;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;KÄ±sa sÃ¼ren iÅŸlemlerimizde bu yapÄ±yÄ± kullanmalÄ±yÄ±z&lt;/li&gt;
&lt;li&gt;Bu yapÄ± bizim iÃ§in otomatik olarak bir thread oluÅŸturur ve ihtiyacÄ± oldukÃ§a yeni bir thread oluÅŸturulmasÄ±nÄ± saÄŸlar&lt;/li&gt;
&lt;li&gt;OluÅŸturulan thread ler boÅŸ kaldÄ±ÄŸÄ±nda thread i kapatÄ±r. (60 saniye)&lt;/li&gt;
&lt;li&gt;OluÅŸturulan thread le iÅŸi bitti ve kapatÄ±lmasÄ± iÃ§in belli bir sÃ¼re gerekiyor (60 saniye). Ama bu sÃ¼re tamamlanmadan yeni bir iÅŸ geldi. Bu iÅŸi yapmak iÃ§in yeni bir thread aÃ§maz. EÄŸer Ã¶nceden oluÅŸturulan thread ler arasÄ±nda uygun durumda olan varsa yeni gelen iÅŸi orada Ã§alÄ±ÅŸtÄ±rÄ±r.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Peki sÃ¼per. HerÅŸey Ã§ok iyi. OlmasÄ± gerektiÄŸi gibi. Peki aynÄ± anda 10000 kiÅŸi iÅŸlem yapmaya Ã§alÄ±ÅŸtÄ±. Ve aÄŸÄ±r iÅŸlemler olduÄŸu iÃ§in sÃ¼rekli yeni thread oluÅŸturmak zorunda kaldÄ±. 10000 tane yeni thread. Thread oluÅŸturmak da belli bir sÃ¼re ve emek gerektiriyor unutma. Peki CPU ? â€¦ vs. vs.
Ä°ÅŸte bu yÃ¼zden kÄ±sa sÃ¼reli ve hafif iÅŸler iÃ§in bu yapÄ±yÄ± kullanÄ±yoruz. ğŸ˜‰&lt;/p&gt;

&lt;p&gt;Aga bana Ã¶rnek sÃ¶yle.&lt;/p&gt;

&lt;p&gt;Tamam sakin ol..  :*&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void executorServiceNewCachedThreadPool() {
    
    ExecutorService executorService = Executors.newCachedThreadPool();

    for (int a = 0; a &amp;lt; 40; a++) {
        executorService.submit(new Runnable() {
            @Override
            public void run() {
                Log.i(TAG, &amp;quot;ExecuterService: &amp;quot; + Thread.currentThread().getName());
            }
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ã‡Ä±ktÄ±:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I/MainActivity: ExecuterServicee: pool-7-thread-43
I/MainActivity: ExecuterServicee: pool-7-thread-10
I/MainActivity: ExecuterServicee: pool-7-thread-111
I/MainActivity: ExecuterServicee: pool-7-thread-47
I/MainActivity: ExecuterServicee: pool-7-thread-91
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;YukarÄ±da ki Ã§Ä±ktÄ±dan gÃ¶rÃ¼ldÃ¼ÄŸÃ¼ Ã¼zere 111 thread oluÅŸturmuÅŸ. Ben 10000 satÄ±rÄ±n sadece bi kÄ±smÄ±nÄ± yapÄ±ÅŸtÄ±rdÄ±m buraya. Belki 200 tane fln de oluÅŸturmuÅŸ olabilir. Yani makineye ve iÅŸe baÄŸlÄ± olarak deÄŸiÅŸiyor. Kodun Ã§alÄ±ÅŸmasÄ±da ~6-7 saniye kadar sÃ¼rdÃ¼. Yani baya uzun. Eee bu kadar thread aÃ§mak kapamak kolay deÄŸil.&lt;/p&gt;

&lt;p&gt;Ama 60 saniye sonra tÃ¼m thread ler kapatÄ±lacak. Bu yÃ¶nden de bakabilirsin.&lt;/p&gt;

&lt;p&gt;Hangi yÃ¶nden bakman gerektiÄŸini projen sÃ¶ylÃ¼cek sana. Kulak ver..&lt;/p&gt;

&lt;p&gt;Neyse..&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static ExecutorService newCachedThreadPool() {
 return new ThreadPoolExecutor(0, Integer.MAX_VALUE,
 60L, TimeUnit.SECONDS,
 new SynchronousQueue&amp;lt;Runnable&amp;gt;());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Not:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;YukarÄ±da ki fonksiyonu kullanarak kendimize uygun cachedThreadPool oluÅŸturabiliriz.&lt;/p&gt;

&lt;p&gt;Tabi ÅŸuraya bakmakta fayda var : &lt;a href=&#34;http://stackoverflow.com/a/1800583/3448461&#34;&gt;http://stackoverflow.com/a/1800583/3448461&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;executors-newfixedthreadpool-n&#34;&gt;EXECUTORS.NEWFIXEDTHREADPOOL(N)&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;
Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue. At any point, at most nThreads threads will be active processing tasks. If additional tasks are submitted when all threads are active, they will wait in the queue until a thread is available. If any thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks. The threads in the pool will exist until it is explicitly shutdown.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Yani diyor ki;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Uygulaman da daha fazla kontrol sahibi olmak istiyorsan bu yapÄ±yÄ± kullan.&lt;/li&gt;
&lt;li&gt;Thread e gÃ¶ndereceÄŸin iÅŸler daha aÄŸÄ±r ve uzun iÅŸler ise bu yapÄ±yÄ± kullan&lt;/li&gt;
&lt;li&gt;Ben senin tanÄ±mlamÄ±ÅŸ olduÄŸun kadar Thread oluÅŸturucam. Ve bana iÅŸ yolladÄ±kÃ§a hangi thread mÃ¼saitse onda Ã§alÄ±ÅŸtÄ±rÄ±cam. TÃ¼m Thread ler dolu iken iÅŸ gelirse sÄ±raya sokacam. Sen raad ol. Ben halledicem hepsini diyor.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void executorServiceNewFixedThreadPool() {

    ExecutorService executorService = Executors.newFixedThreadPool(5);

    for (int a = 0; a &amp;lt; 10000; a++) {
        executorService.execute(new Runnable() {
            @Override
            public void run() {
                Log.i(TAG, &amp;quot;ExecuterServicee: &amp;quot; + Thread.currentThread().getName());
            }
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ã‡Ä±ktÄ±:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I/MainActivity: ExecuterServicee: pool-7-thread-5
I/MainActivity: ExecuterServicee: pool-7-thread-5
I/MainActivity: ExecuterServicee: pool-7-thread-1
I/MainActivity: ExecuterServicee: pool-7-thread-3
I/MainActivity: ExecuterServicee: pool-7-thread-3
I/MainActivity: ExecuterServicee: pool-7-thread-3
I/MainActivity: ExecuterServicee: pool-7-thread-3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ortalama ~2 saniye sÃ¼rdÃ¼.&lt;/p&gt;

&lt;h3 id=&#34;executors-newsinglethreadexecutor&#34;&gt;EXECUTORS.NEWSINGLETHREADEXECUTOR()&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void executorServiceNewSingleThreadExecutor() {
    ExecutorService executorService = Executors.newSingleThreadExecutor();

    for (int a = 0; a &amp;lt; 10000; a++) {
        executorService.execute(new Runnable() {
            @Override
            public void run() {
                Log.i(TAG, &amp;quot;ExecuterServicee: &amp;quot; + Thread.currentThread().getName());
            }
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ã‡Ä±ktÄ±:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I/MainActivity: ExecuterServicee: pool-7-thread-1
I/MainActivity: ExecuterServicee: pool-7-thread-1
I/MainActivity: ExecuterServicee: pool-7-thread-1
I/MainActivity: ExecuterServicee: pool-7-thread-1
I/MainActivity: ExecuterServicee: pool-7-thread-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ortalama ~2 saniye sÃ¼rdÃ¼.&lt;/p&gt;

&lt;p&gt;Tek bir Thread oluÅŸturarak tÃ¼m gelen iÅŸleri sÄ±raya sokarak bu Thread Ã¼zerinde iÅŸlemi gerÃ§ekleÅŸtirir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Peki bir soru ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Executors.newSingleThreadExecutor() ile Executors.newFixedThreadPool(1) arasÄ±nda fark var mÄ± ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ufakta olsa var tabi.&lt;/p&gt;

&lt;p&gt;Ama ikiside tek bir Thread oluÅŸturur ve gelen tÃ¼m iÅŸleri bu Thread Ã¼zerinden gerÃ§ekleÅŸtirir.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fark :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Similirity
newSingleThreadExecutor() returns ExecutorService with single thread worker and newFixedThreadPool(1) also returns ExecutorService with single thread worker. In both cases if thread terminates, new thread will be created.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Difference
ExecutorService returned by newSingleThreadExecutor(), can never increase its thread pool size more than one. ExecutorService returned by newFixedThreadPool(1), can increase its thread pool size more than one at run time by setCorePoolSize() of the class ThreadPoolExecutor.
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Yani &lt;strong&gt;newFixedThreadPool(1)&lt;/strong&gt; ile oluÅŸturulan tek Thread yapÄ±sÄ± sonradan artÄ±rÄ±labilir. Ama &lt;strong&gt;newSingleThreadExecutor()&lt;/strong&gt; ile oluÅŸturulan yapÄ± her zaman tek Thread Ã¼zerinden Ã§alÄ±ÅŸtÄ±rÄ±lÄ±r.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NasÄ±l arttÄ±rabiliriz ?&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;private void changeThreadSize() {

    ExecutorService executorService = Executors.newFixedThreadPool(1);
    ThreadPoolExecutor threadPoolExecutor = (ThreadPoolExecutor) executorService;
    threadPoolExecutor.setCorePoolSize(2);
    threadPoolExecutor.setMaximumPoolSize(2);

    for (int a = 0; a &amp;lt; 10000; a++) {
        threadPoolExecutor.execute(new Runnable() {
            @Override
            public void run() {
                Log.i(TAG, &amp;quot;ExecuterServicee: &amp;quot; + Thread.currentThread().getName());
            }
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Ã‡Ä±ktÄ±:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;I/MainActivity: ExecuterServicee: pool-7-thread-1
I/MainActivity: ExecuterServicee: pool-7-thread-1
I/MainActivity: ExecuterServicee: pool-7-thread-2
I/MainActivity: ExecuterServicee: pool-7-thread-2
I/MainActivity: ExecuterServicee: pool-7-thread-2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Runnable() &amp; Callable()</title>
      <link>http://yazilim.aykutasil.com/2017/01/runnable--callable/</link>
      <pubDate>Wed, 11 Jan 2017 18:55:08 +0300</pubDate>
      
      <guid>http://yazilim.aykutasil.com/2017/01/runnable--callable/</guid>
      <description>

&lt;h1 id=&#34;runnable-callable&#34;&gt;Runnable() &amp;amp; Callable()&lt;/h1&gt;

&lt;p&gt;AyrÄ±ntÄ±lÄ± aÃ§Ä±klama iÃ§in &lt;a href=&#34;http://www.java67.com/2013/01/difference-between-callable-and-runnable-java.html&#34;&gt;bu siteyi&lt;/a&gt; kullanabilirsiniz.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>